<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Recognos.Core</name>
    </assembly>
    <members>
        <member name="T:Recognos.Core.TimedAction">
            <summary>
            Represents a timed action.
            </summary>
        </member>
        <member name="F:Recognos.Core.TimedAction.action">
            <summary>
            Action to execute
            </summary>
        </member>
        <member name="F:Recognos.Core.TimedAction.watch">
            <summary>
            Time keeper
            </summary>
        </member>
        <member name="F:Recognos.Core.TimedAction.disposed">
            <summary>
            Flag indicating whether the object has been disposed.
            </summary>
        </member>
        <member name="M:Recognos.Core.TimedAction.#ctor(System.Action{System.TimeSpan})">
            <summary>
            Initializes a new instance of the <see cref="T:Recognos.Core.TimedAction"/> class.
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="M:Recognos.Core.TimedAction.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Recognos.Core.Threading.TaskErrorEventArgs">
            <summary>
            Event arguments for task errors
            </summary>
        </member>
        <member name="M:Recognos.Core.Threading.TaskErrorEventArgs.#ctor(Recognos.Core.Threading.ITask,System.Exception)">
            <summary>
            Initializes a new instance of the TaskErrorEventArgs class.
            </summary>
            <param name="task">Task that has generated the error</param>
            <param name="taskException">The exception that has been thrown</param>
        </member>
        <member name="P:Recognos.Core.Threading.TaskErrorEventArgs.Task">
            <summary>
            Gets the task that generated the error
            </summary>
        </member>
        <member name="P:Recognos.Core.Threading.TaskErrorEventArgs.TaskException">
            <summary>
            Gets the exception that has been thrown by the task
            </summary>
        </member>
        <member name="P:Recognos.Core.Threading.TaskErrorEventArgs.WasHandled">
            <summary>
            Gets or sets a value indicating whether the exception was handeled
            </summary>
        </member>
        <member name="T:Recognos.Core.TaskHelper">
            <summary>
            Hepler class for task based operations.
            </summary>
        </member>
        <member name="M:Recognos.Core.TaskHelper.RunWithRetry(System.Action,System.Int32)">
            <summary>
            Runs an action and retries the task if an exception ocurs.
            </summary>
            <param name="action">The action.</param>
            <param name="count">The count.</param>
        </member>
        <member name="M:Recognos.Core.TaskHelper.RunWithRetry``1(System.Action,System.Int32)">
            <summary>
            Runs an action and retries the task if an exception ocurs.
            </summary>
            <typeparam name="TException">The type of the exception.</typeparam>
            <param name="action">The action.</param>
            <param name="count">The count.</param>
        </member>
        <member name="T:Recognos.Core.IOC.IBootstrapper">
            <summary>
            Interface for an application bootstrapper.
            </summary>
            <remarks>
            If possible use Autofac
            </remarks>
        </member>
        <member name="M:Recognos.Core.IOC.IBootstrapper.Run">
            <summary>
            Runs the bootstrapper.
            </summary>
        </member>
        <member name="T:Recognos.Core.Caching.WeekReferenceLightCache">
            <summary>
            Sample implamentation of a cache manager based on week references
            </summary>
            <remarks>This class is and needs to remain Thread Safe</remarks>
        </member>
        <member name="T:Recognos.Core.Caching.ICache">
            <summary>
            Generic caching system interface
            For Web Applications Recognos.Web.IWebCache
            </summary>
            <remarks>
            In .net 4.0 use System.Runtime.Caching :http://msdn.microsoft.com/en-us/library/system.runtime.caching.aspx
            </remarks>
        </member>
        <member name="M:Recognos.Core.Caching.ICache.Cached``1(System.String,System.Func{``0},Recognos.Core.Caching.IExpirationPolicyProvider)">
            <summary>
            Returns an item from the cache. If the item is not found in cache the 
            <paramref name="getter"/> is called to retrivie the objects, witch is added 
            to the cache and returned
            </summary>
            <typeparam name="T">Type of the object</typeparam>
            <param name="key">Key for the object</param>
            <param name="getter">Fuction to retrive the object if not founc in cache</param>
            <param name="policyProvider">Provider for expiration policy</param>
            <returns>The requested object</returns>
        </member>
        <member name="M:Recognos.Core.Caching.ICache.Cached``1(System.String,System.Func{``0},Recognos.Core.Caching.CachePriority)">
            <summary>
            Returns an item from the cache. If the item is not found in cache the 
            <paramref name="getter"/> is called to retrivie the objects, witch is added 
            to the cache and returned
            </summary>
            <typeparam name="T">Type of the object</typeparam>
            <param name="key">Key for the object</param>
            <param name="getter">Fuction to retrive the object if not founc in cache</param>
            <param name="priority">Priority of the cached item</param>
            <returns>The requested object</returns>
        </member>
        <member name="M:Recognos.Core.Caching.ICache.Cached``1(System.String,System.Func{``0},System.TimeSpan)">
            <summary>
            Returns an item from the cache. If the item is not found in cache the 
            <paramref name="getter"/> is called to retrivie the objects, witch is added 
            to the cache and returned
            </summary>
            <typeparam name="T">Type of the object</typeparam>
            <param name="key">Key for the object</param>
            <param name="getter">Fuction to retrive the object if not founc in cache</param>
            <param name="slidingExpiration">Time to keep the object inactive in cache</param>
            <returns>The requested object</returns>
        </member>
        <member name="M:Recognos.Core.Caching.ICache.Cached``1(System.String,System.Func{``0})">
            <summary>
            Returns an item from the cache. If the item is not found in cache the 
            <paramref name="getter"/> is called to retrivie the objects, witch is added 
            to the cache and returned
            </summary>
            <typeparam name="T">Type of the object</typeparam>
            <param name="key">Key for the object</param>
            <param name="getter">Fuction to retrive the object if not founc in cache</param>
            <returns>The requested object</returns>
        </member>
        <member name="M:Recognos.Core.Caching.ICache.Contains(System.String)">
            <summary>
            Verify if an item is cached. 
            </summary>
            <remarks>The item might be removed from cache immediatly after this method returns true</remarks>
            <param name="key">Key for the item</param>
            <returns>True if the item is cached, false otherwise</returns>
        </member>
        <member name="P:Recognos.Core.Caching.ICache.SupportsCacheDependency">
            <summary>
            Gets a value indicating whether the instance supports cache dependencies.
            </summary>
        </member>
        <member name="F:Recognos.Core.Caching.WeekReferenceLightCache.cache">
            <summary>
            Dictionary to store the cached items
            </summary>
        </member>
        <member name="M:Recognos.Core.Caching.WeekReferenceLightCache.#ctor">
            <summary>
            Initializes a new instance of the WeekReferenceLightCache class.
            </summary>
        </member>
        <member name="M:Recognos.Core.Caching.WeekReferenceLightCache.Cached``1(System.String,System.Func{``0})">
            <summary>
            Returns an item from the cache. If the item is not found in cache the 
            <paramref name="getter"/> is called to retrivie the objects, witch is added 
            to the cache and returned
            </summary>
            <remarks>Objects can only be removed by the garbage collector</remarks>
            <typeparam name="T">Type of the object</typeparam>
            <param name="key">Key for the object</param>
            <param name="getter">Fuction to retrive the object if not founc in cache</param>
            <returns>The requested object</returns>
        </member>
        <member name="M:Recognos.Core.Caching.WeekReferenceLightCache.Cached``1(System.String,System.Func{``0},Recognos.Core.Caching.IExpirationPolicyProvider)">
            <summary>
            Returns an item from the cache. If the item is not found in cache the 
            <paramref name="getter"/> is called to retrivie the objects, witch is added 
            to the cache and returned
            </summary>
            <remarks>Objects can only be removed by the garbage collector</remarks>
            <typeparam name="T">Type of the object</typeparam>
            <param name="key">Key for the object</param>
            <param name="getter">Fuction to retrive the object if not founc in cache</param>
            <param name="policyProvider">UNUSED: Provider for expiration policy</param>
            <returns>The requested object</returns>
        </member>
        <member name="M:Recognos.Core.Caching.WeekReferenceLightCache.Cached``1(System.String,System.Func{``0},Recognos.Core.Caching.CachePriority)">
            <summary>
            Returns an item from the cache. If the item is not found in cache the 
            <paramref name="getter"/> is called to retrivie the objects, witch is added 
            to the cache and returned
            </summary>
            <remarks>Objects can only be removed by the garbage collector</remarks>
            <typeparam name="T">Type of the object</typeparam>
            <param name="key">Key for the object</param>
            <param name="getter">Fuction to retrive the object if not founc in cache</param>
            <param name="priority">UNUSED Priority of the cached item</param>
            <returns>The requested object</returns>
        </member>
        <member name="M:Recognos.Core.Caching.WeekReferenceLightCache.Cached``1(System.String,System.Func{``0},System.TimeSpan)">
            <summary>
            Returns an item from the cache. If the item is not found in cache the 
            <paramref name="getter"/> is called to retrivie the objects, witch is added 
            to the cache and returned
            </summary>
            <remarks>Objects can only be removed by the garbage collector</remarks>
            <typeparam name="T">Type of the object</typeparam>
            <param name="key">Key for the object</param>
            <param name="getter">Fuction to retrive the object if not founc in cache</param>
            <param name="slidingExpiration">UNUSED Time to keep the object inactive in cache</param>
            <returns>The requested object</returns>
        </member>
        <member name="M:Recognos.Core.Caching.WeekReferenceLightCache.Contains(System.String)">
            <summary>
            Verify if an item is cached. 
            </summary>
            <remarks>The item might be removed from cache immediatly after this method returns true</remarks>
            <param name="key">Key for the item</param>
            <returns>True if the item is cached, false otherwise</returns>
        </member>
        <member name="P:Recognos.Core.Caching.WeekReferenceLightCache.SupportsCacheDependency">
            <summary>
            Gets a value indicating whether the instance supports cache dependencies. Always false.
            </summary>
        </member>
        <member name="T:Recognos.Core.Caching.IExpirationPolicyProvider">
            <summary>
            Interface for objects that provide information about when to expire an item from the cache
            </summary>
        </member>
        <member name="M:Recognos.Core.Caching.IExpirationPolicyProvider.GetPolicyFor``1(``0)">
            <summary>
            Return an expiration policy for the object to cache
            </summary>
            <typeparam name="T">Type of the object to cache</typeparam>
            <param name="objectToCache">The object to cache</param>
            <returns>The expiration policy</returns>
        </member>
        <member name="T:Recognos.Core.FileUtilities">
            <summary>
            Utilities for handling files
            </summary>
        </member>
        <member name="M:Recognos.Core.FileUtilities.ComputeSHA1Hash(System.IO.Stream)">
            <summary>
            Compute the SHA1 hash of a stream.
            </summary>
            <param name="stream">Stream for witch to compute the hash.</param>
            <returns>The hexadecimal hash.</returns>
        </member>
        <member name="M:Recognos.Core.FileUtilities.ComputeSHA1Hash(System.String)">
            <summary>
            Computes the SHA1 hash of a file.
            </summary>
            <param name="pathToFile">The path to file.</param>
            <returns>The hexadecimal hash.</returns>
        </member>
        <member name="M:Recognos.Core.FileUtilities.SaveToFile(System.IO.Stream,System.String)">
            <summary>
            Saves a stream to a file.
            </summary>
            <param name="stream">The stream.</param>
            <param name="pathToFile">The path to file.</param>
        </member>
        <member name="M:Recognos.Core.FileUtilities.SaveToFile(System.IO.Stream,System.String,System.Int32)">
            <summary>
            Saves a stream to a file.
            </summary>
            <param name="stream">The stream.</param>
            <param name="pathToFile">The path to file.</param>
            <param name="bufferSize">Size of the buffer.</param>
        </member>
        <member name="M:Recognos.Core.FileUtilities.SaveToStream(System.IO.Stream,System.IO.Stream)">
            <summary>
            Saves a stream to another stream.
            </summary>
            <param name="stream">The input stream.</param>
            <param name="outputStream">The output stream.</param>
        </member>
        <member name="M:Recognos.Core.FileUtilities.SaveToStream(System.IO.Stream,System.IO.Stream,System.Int32)">
            <summary>
            Saves a stream to another stream.
            </summary>
            <param name="stream">The input stream.</param>
            <param name="outputStream">The output stream.</param>
            <param name="bufferSize">Size of the buffer.</param>
        </member>
        <member name="M:Recognos.Core.FileUtilities.ReadContent(System.IO.Stream)">
            <summary>
            Reads the content from the stream.
            </summary>
            <param name="stream">The stream.</param>
            <returns>The content as a string.</returns>
        </member>
        <member name="M:Recognos.Core.FileUtilities.ReadBinaryContent(System.IO.Stream)">
            <summary>
            Reads the content from the stream as binary.
            </summary>
            <param name="stream">The stream.</param>
            <returns>byte array with the stream content.</returns>
        </member>
        <member name="M:Recognos.Core.FileUtilities.ReadContent(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Reads the content from the stream.
            </summary>
            <param name="stream">The stream.</param>
            <param name="encoding">The encoding.</param>
            <returns>The content as a string.</returns>
        </member>
        <member name="T:Recognos.Core.DisplayNameAttribute">
            <summary>
            Attribute representing the visual name for an enum value
            </summary>
        </member>
        <member name="F:Recognos.Core.DisplayNameAttribute.displayName">
            <summary>
            The display name
            </summary>
        </member>
        <member name="M:Recognos.Core.DisplayNameAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Recognos.Core.DisplayNameAttribute"/> class.
            </summary>
            <param name="displayName">The display name.</param>
        </member>
        <member name="P:Recognos.Core.DisplayNameAttribute.DisplayName">
            <summary>
            Gets the display name.
            </summary>
        </member>
        <member name="T:Recognos.Core.Context.ContextManager">
            <summary>
            Utility class to associate some data with a context.
            </summary>
            <remarks>
            This is usualy used to associate data with a Request,Session,Thread or AppDomain context.
            </remarks>
        </member>
        <member name="F:Recognos.Core.Context.ContextManager.map">
            <summary>
            Dictionary to store the IContextualStorage implementations.
            </summary>
        </member>
        <member name="M:Recognos.Core.Context.ContextManager.Configure``1(Recognos.Core.Context.IContextualStorage{``0})">
            <summary>
            Configures the specified storage.
            </summary>
            <typeparam name="T">Type of the configured element.</typeparam>
            <param name="storage">The storage.</param>
        </member>
        <member name="M:Recognos.Core.Context.ContextManager.Current``1">
            <summary>
            Returns the value of the instance of the type T stored in the current context.
            </summary>
            <typeparam name="T">Type of the instance stored in the context.</typeparam>
            <returns>Value of the instance of the type T stored in the current context.</returns>
        </member>
        <member name="M:Recognos.Core.Context.ContextManager.ResetCurrent``1">
            <summary>
            Resets the value in the current context configure for type T to a new value.
            </summary>
            <typeparam name="T">Type of the instance.</typeparam>
        </member>
        <member name="M:Recognos.Core.Context.ContextManager.FindStorage``1">
            <summary>
            Finds the storage for the specified type.
            </summary>
            <typeparam name="T">Type to find storage for.</typeparam>
            <returns>The Contextual storage for the type.</returns>
        </member>
        <member name="T:Recognos.Core.ValueExtensions">
            <summary>
            Helper extension methods to perform basic operation on values.
            </summary>
        </member>
        <member name="M:Recognos.Core.ValueExtensions.IsNullOrEmpty(System.String)">
            <summary>
            Determines whether the <paramref name="value"/> is null or empty.
            </summary>
            <param name="value">The value.</param>
            <returns>
            <c>true</c> if the <paramref name="value"/> is null or empty.; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Recognos.Core.ValueExtensions.IsNullOrEmpty(System.Nullable{System.Guid})">
            <summary>
            Determines whether the <paramref name="value"/> is null or empty.
            </summary>
            <param name="value">The value.</param>
            <returns>
            <c>true</c> if the <paramref name="value"/> is null or empty.; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Recognos.Core.ValueExtensions.IsDefault(System.Guid)">
            <summary>
            Determines whether the specified value is the default value for the type.
            </summary>
            <param name="value">The value.</param>
            <returns>
            <c>true</c> if the specified value is the default value for the type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Recognos.Core.ValueExtensions.IsEmpty(System.Guid)">
            <summary>
            Determines whether the specified value is considered empty.
            </summary>
            <param name="value">The value.</param>
            <returns>
            <c>true</c> if the specified value is considered empty; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Recognos.Core.ValueExtensions.IsNullOrEmpty(System.Nullable{System.DateTime})">
            <summary>
            Determines whether the <paramref name="value"/> is null or empty.
            </summary>
            <param name="value">The value.</param>
            <returns>
            <c>true</c> if the <paramref name="value"/> is null or empty.; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Recognos.Core.ValueExtensions.IsDefault(System.DateTime)">
            <summary>
            Determines whether the specified value is the default value for the type.
            </summary>
            <param name="value">The value.</param>
            <returns>
            <c>true</c> if the specified value is the default value for the type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Recognos.Core.ValueExtensions.IsEmpty(System.DateTime)">
            <summary>
            Determines whether the specified value is considered empty.
            </summary>
            <param name="value">The value.</param>
            <returns>
            <c>true</c> if the specified value is considered empty; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Recognos.Core.ValueExtensions.IsNullOrEmpty``1(``0[])">
            <summary>
            Determines whether the <paramref name="value"/> is null or empty.
            </summary>
            <typeparam name="T">Type of the elements in the <paramref name="value"/> array</typeparam>
            <param name="value">The value.</param>
            <returns>
            <c>true</c> if the <paramref name="value"/> is null or empty.; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Recognos.Core.ValueExtensions.IsNullOrEmpty(System.String[])">
            <summary>
            Determines whether the <paramref name="value"/> is null or empty.
            </summary>
            <remarks>
            An array that only contains empty strings is considered empty.
            </remarks>
            <param name="value">The value.</param>
            <returns>
            <c>true</c> if the <paramref name="value"/> is null or empty.; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Recognos.Core.ValueExtensions.IsNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Determines whether the <paramref name="enumerable"/> is null or empty.
            </summary>
            <typeparam name="T">Type of elements in the <paramref name="enumerable"/></typeparam>
            <param name="enumerable">The enumerable.</param>
            <returns>
            <c>true</c> if the <paramref name="enumerable"/> is null or empty; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Recognos.Core.ValueExtensions.IsNullOrEmpty(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Determines whether the <paramref name="enumerable"/> is null or empty.
            </summary>
            <remarks>
            An enumerable consisting only of empty strings is considered empty.
            </remarks>
            <param name="enumerable">The enumerable.</param>
            <returns>
            <c>true</c> if the <paramref name="enumerable"/> is null or empty; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Recognos.Core.Threading.ReadLock">
            <summary>
            Implementation for a Read Lock based on ReaderWriterLockSlim
            </summary>
        </member>
        <member name="T:Recognos.Core.Threading.BaseLock">
            <summary>
            Base class for ReaderWriterLockSlim wrappers
            </summary>
        </member>
        <member name="F:Recognos.Core.Threading.BaseLock.disposed">
            <summary>
            Flag indicating whether this instance has been disposed.
            </summary>
        </member>
        <member name="M:Recognos.Core.Threading.BaseLock.#ctor(System.Threading.ReaderWriterLockSlim)">
            <summary>
            Initializes a new instance of the <see cref="T:Recognos.Core.Threading.BaseLock"/> class.
            </summary>
            <param name="locks">The locks.</param>
        </member>
        <member name="M:Recognos.Core.Threading.BaseLock.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Recognos.Core.Threading.BaseLock.DoDispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Recognos.Core.Threading.BaseLock.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="P:Recognos.Core.Threading.BaseLock.LocksInstance">
            <summary>
            Gets the locks instance.
            </summary>
            <value>The locks instance.</value>
        </member>
        <member name="M:Recognos.Core.Threading.ReadLock.#ctor(System.Threading.ReaderWriterLockSlim)">
            <summary>
            Initializes a new instance of the <see cref="T:Recognos.Core.Threading.ReadLock"/> class.
            </summary>
            <param name="locks">The locks.</param>
        </member>
        <member name="M:Recognos.Core.Threading.ReadLock.DoDispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Recognos.Core.Check">
            <summary>
            Helper class to check methods arguments
            </summary>
        </member>
        <member name="F:Recognos.Core.Check.emailRegex">
            <summary>
            regular expresion for email validation
            </summary>
        </member>
        <member name="M:Recognos.Core.Check.NotNull``1(``0,System.String)">
            <summary>
            verify that argument is not null
            </summary>
            <param name="argument">argument to check</param>
            <param name="name">Original name of the argument</param>
            <typeparam name="T">Type of the argument</typeparam>
        </member>
        <member name="M:Recognos.Core.Check.NotEmpty(System.String,System.String)">
            <summary>
            verify that argument is not null or empty
            </summary>
            <param name="argument">argument to check</param>
            <param name="name">Original name of the argument</param>
        </member>
        <member name="M:Recognos.Core.Check.NotEmpty(System.Guid,System.String)">
            <summary>
            Verify that argument is not empty.
            </summary>
            <param name="argument">The argument.</param>
            <param name="name">The name of the argument.</param>
        </member>
        <member name="M:Recognos.Core.Check.NotEmpty(System.DateTime,System.String)">
            <summary>
            Verify that argument is not empty.
            </summary>
            <param name="argument">The argument.</param>
            <param name="name">The name of the argument.</param>
        </member>
        <member name="M:Recognos.Core.Check.NotEmpty``1(``0[],System.String)">
            <summary>
            Check an array to not be empty
            </summary>
            <typeparam name="T">Type of elements in the array</typeparam>
            <param name="argument">The array to check</param>
            <param name="name">Name of the array</param>
        </member>
        <member name="M:Recognos.Core.Check.NotEmpty``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Check a enumerable to not be empty
            </summary>
            <typeparam name="T">Type of elements in collection</typeparam>
            <param name="argument">The collection</param>
            <param name="name">Name of the collection</param>
        </member>
        <member name="M:Recognos.Core.Check.Positive(System.Int32,System.String)">
            <summary>
            verify that argument is >= 0
            </summary>
            <param name="value">value to check</param>
            <param name="name">Original name of the argument</param>
        </member>
        <member name="M:Recognos.Core.Check.Positive(System.Int64,System.String)">
            <summary>
            verify that argument is >= 0
            </summary>
            <param name="value">value to check</param>
            <param name="name">Original name of the argument</param>
        </member>
        <member name="M:Recognos.Core.Check.Positive(System.Decimal,System.String)">
            <summary>
            verify that argument is >= 0
            </summary>
            <param name="value">value to check</param>
            <param name="name">Original name of the argument</param>
        </member>
        <member name="M:Recognos.Core.Check.AbsolutePositive(System.Int32,System.String)">
            <summary>
            verify that argument is > 0
            </summary>
            <param name="value">value to check</param>
            <param name="name">Original name of the argument</param>
        </member>
        <member name="M:Recognos.Core.Check.AbsolutePositive(System.Int64,System.String)">
            <summary>
            verify that argument is > 0
            </summary>
            <param name="value">value to check</param>
            <param name="name">Original name of the argument</param>
        </member>
        <member name="M:Recognos.Core.Check.AbsolutePositive(System.Decimal,System.String)">
            <summary>
            verify that argument is > 0
            </summary>
            <param name="value">value to check</param>
            <param name="name">Original name of the argument</param>
        </member>
        <member name="M:Recognos.Core.Check.RegexMatch(System.String,System.String,System.String)">
            <summary>
            verify that argument matches a regular expression
            </summary>
            <param name="regex">The pattern to match against.</param>
            <param name="value">value to check</param>
            <param name="name">Original name of the argument</param>
        </member>
        <member name="M:Recognos.Core.Check.Condition(System.Boolean)">
            <summary>
            verify that condition is true
            </summary>
            <param name="expression">Expression to check</param>
        </member>
        <member name="M:Recognos.Core.Check.Condition(System.Boolean,System.String)">
            <summary>
            verify that condition is true
            </summary>
            <param name="expression">Expression to check</param>
            <param name="message">Message to put in exception if expression is false</param>
        </member>
        <member name="M:Recognos.Core.Check.Condition(System.Boolean,System.String,System.Object[])">
            <summary>
            verify that condition is true
            </summary>
            <param name="expression">Expression to check</param>
            <param name="message">Message to put in exception if expression is false</param>
            <param name="args">Arguments to format message with</param>
        </member>
        <member name="M:Recognos.Core.Check.Condition(System.Func{System.Boolean})">
            <summary>
            verify that expression evaluates to true
            </summary>
            <param name="expression">Expression to check</param>
        </member>
        <member name="M:Recognos.Core.Check.Condition(System.Func{System.Boolean},System.String)">
            <summary>
            verify that expression evaluates to true
            </summary>
            <param name="expression">Expression to check</param>
            <param name="message">Message to put in exception if expression is false</param>
        </member>
        <member name="M:Recognos.Core.Check.IsInstanceOf``1(System.Object,System.String)">
            <summary>
            Determines whether intance is instance of type T.
            </summary>
            <typeparam name="T">Type to check against.</typeparam>
            <param name="instance">The instance.</param>
            <param name="name">The name of the variable.</param>
        </member>
        <member name="M:Recognos.Core.Check.InjectedMembers``1(``0)">
            <summary>
            Verifies that all interface members of the instance are not null.
            </summary>
            <typeparam name="T">Type of the instance</typeparam>
            <param name="instance">The instance to check.</param>
        </member>
        <member name="M:Recognos.Core.Check.ValidEmail(System.String,System.String)">
            <summary>
            Verify if an email address is valid
            </summary>
            <param name="email">The email value.</param>
            <param name="name">The name of the variable.</param>
        </member>
        <member name="T:Recognos.Core.Threading.ParallelExecutionException">
            <summary>
            Exception throw if when the executor finished work there are errors that wore not handeled
            </summary>
        </member>
        <member name="M:Recognos.Core.Threading.ParallelExecutionException.#ctor">
            <summary>
            Initializes a new instance of the ParallelExecutionException class
            </summary>
        </member>
        <member name="M:Recognos.Core.Threading.ParallelExecutionException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ParallelExecutionException class
            </summary>
            <param name="message">Exception message</param>
        </member>
        <member name="M:Recognos.Core.Threading.ParallelExecutionException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the ParallelExecutionException class
            </summary>
            <param name="message">Exception message</param>
            <param name="innerException">Inner exception</param>
        </member>
        <member name="M:Recognos.Core.Threading.ParallelExecutionException.#ctor(System.Collections.Generic.IEnumerable{Recognos.Core.Threading.TaskErrorEventArgs})">
            <summary>
            Initializes a new instance of the ParallelExecutionException class
            </summary>
            <param name="errors">Collection of unhandeled errors</param>
        </member>
        <member name="M:Recognos.Core.Threading.ParallelExecutionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the ParallelExecutionException class
            </summary>
            <param name="info">the serialization info</param>
            <param name="context">the serialization context</param>
        </member>
        <member name="M:Recognos.Core.Threading.ParallelExecutionException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Helper method for exception serialization
            </summary>
            <param name="info">the serialization info</param>
            <param name="context">the serialization context</param>
        </member>
        <member name="P:Recognos.Core.Threading.ParallelExecutionException.Errors">
            <summary>
            Gets the collection of unhandeled errors
            </summary>
        </member>
        <member name="T:Recognos.Core.ObjectExtensions">
            <summary>
            Extension methods for object type
            </summary>
        </member>
        <member name="M:Recognos.Core.ObjectExtensions.NullSafeToString(System.Object)">
            <summary>
            If the object is not null returns the ToString() method result. 
            Returns string.Empty on null object.
            </summary>
            <param name="target">The target object.</param>
            <returns>The string representation of the object.</returns>
        </member>
        <member name="M:Recognos.Core.ObjectExtensions.ToEnumerable``1(``0)">
            <summary>
            Converts an instance of an object to an enumerable containing that object.
            </summary>
            <typeparam name="T">Type of the object</typeparam>
            <param name="instance">The instance.</param>
            <returns>Enumerable containing the object.</returns>
        </member>
        <member name="T:Recognos.Core.IOC.FunctionalObjectBuilder">
            <summary>
            Helper class to map an existing DI container to the required interfaces.
            </summary>
        </member>
        <member name="T:Recognos.Core.IOC.IObjectBuilder">
            <summary>
            Interface for a dependency injection container used to build objects.
            </summary>
            <remarks>
            If possible use Autofac.
            </remarks>
        </member>
        <member name="M:Recognos.Core.IOC.IObjectBuilder.Build``1">
            <summary>
            Creates an instance of the given type, injecting it with all defined dependencies.
            </summary>
            <typeparam name="T">Type of instance to create.</typeparam>
            <returns>The created instance.</returns>
        </member>
        <member name="M:Recognos.Core.IOC.IObjectBuilder.Build(System.Type)">
            <summary>
            Creates an instance of the given type, injecting it with all defined dependencies.
            </summary>
            <param name="type">Type of instance to create.</param>
            <returns>The created instance.s</returns>
        </member>
        <member name="M:Recognos.Core.IOC.IObjectBuilder.BuildAll``1">
            <summary>
            For each type that is compatible with T, an instance is created with all
                dependencies injected, and yielded to the caller.
            </summary>
            <typeparam name="T">Type of instance to create.</typeparam>
            <returns>A enumerable collection of instances.</returns>
        </member>
        <member name="M:Recognos.Core.IOC.IObjectBuilder.BuildAll(System.Type)">
            <summary>
            For each type that is compatible with T, an instance is created with all
                dependencies injected, and yielded to the caller.
            </summary>
            <param name="type">Type of instance to create.</param>
            <returns>A enumerable collection of instances.</returns>
        </member>
        <member name="F:Recognos.Core.IOC.FunctionalObjectBuilder.builder">
            <summary>
            Member holding the functor used to build objects.
            </summary>
        </member>
        <member name="F:Recognos.Core.IOC.FunctionalObjectBuilder.collectionBuilder">
            <summary>
            Member holding the functor used to build collections of objects.
            </summary>
        </member>
        <member name="M:Recognos.Core.IOC.FunctionalObjectBuilder.#ctor(System.Func{System.Type,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Recognos.Core.IOC.FunctionalObjectBuilder"/> class.
            </summary>
            <param name="builder">The builder.</param>
        </member>
        <member name="M:Recognos.Core.IOC.FunctionalObjectBuilder.#ctor(System.Func{System.Type,System.Object},System.Func{System.Type,System.Collections.Generic.IEnumerable{System.Object}})">
            <summary>
            Initializes a new instance of the <see cref="T:Recognos.Core.IOC.FunctionalObjectBuilder"/> class.
            </summary>
            <param name="builder">The object builder.</param>
            <param name="collectionBuilder">The collection builder.</param>
        </member>
        <member name="M:Recognos.Core.IOC.FunctionalObjectBuilder.Build``1">
            <summary>
            Creates an instance of the given type, injecting it with all defined dependencies.
            </summary>
            <typeparam name="T">Type of instance to create.</typeparam>
            <returns>The created instance.</returns>
        </member>
        <member name="M:Recognos.Core.IOC.FunctionalObjectBuilder.Build(System.Type)">
            <summary>
            Creates an instance of the given type, injecting it with all defined dependencies.
            </summary>
            <param name="type">Type of instance to create.</param>
            <returns>The created instance.s</returns>
        </member>
        <member name="M:Recognos.Core.IOC.FunctionalObjectBuilder.BuildAll``1">
            <summary>
            For each type that is compatible with T, an instance is created with all
            dependencies injected, and yeilded to the caller.
            </summary>
            <typeparam name="T">Type of instance to create.</typeparam>
            <returns>A enumerable collection of instances.</returns>
        </member>
        <member name="M:Recognos.Core.IOC.FunctionalObjectBuilder.BuildAll(System.Type)">
            <summary>
            For each type that is compatible with T, an instance is created with all
            dependencies injected, and yeilded to the caller.
            </summary>
            <param name="type">Type of instance to create.</param>
            <returns>A enumerable collection of instances.</returns>
        </member>
        <member name="T:Recognos.Core.Threading.TaskExecutor">
            <summary>
            Helper class to run a set of tasks in parallel. 
            This calss uses a number of worker threads witch will execute the queued tasks in parallel as much as possible.
            The worker threads are background threads and you must call Dispose() or Finish() to ensure all the tasks are finished
            </summary>
        </member>
        <member name="T:Recognos.Core.Threading.ITaskExecutor">
            <summary>
            Interface for a task executor
            </summary>
        </member>
        <member name="M:Recognos.Core.Threading.ITaskExecutor.AddTask(Recognos.Core.Threading.ITask)">
            <summary>
            Adds the task to be executed.
            </summary>
            <param name="task">The task to execute.</param>
        </member>
        <member name="M:Recognos.Core.Threading.ITaskExecutor.AddTask(System.Action)">
            <summary>
            Adds the task to be executed.
            </summary>
            <param name="action">The action to be executed.</param>
        </member>
        <member name="M:Recognos.Core.Threading.ITaskExecutor.FlushTasks">
            <summary>
            Flushes the tasks. Currently added tasks will be finished.
            </summary>
        </member>
        <member name="M:Recognos.Core.Threading.ITaskExecutor.Finish">
            <summary>
            Wait for all tasks to finish. After calling this method the instance must not be used anymore
            </summary>
        </member>
        <member name="E:Recognos.Core.Threading.ITaskExecutor.OnTaskError">
            <summary>
            Occurs when a task raises an unhandled exception.
            This event occurs on the thread witch calls finish or disposes the instance.
            </summary>
        </member>
        <member name="E:Recognos.Core.Threading.ITaskExecutor.OnThreadTaskError">
            <summary>
            Occurs when a task raises an unhandled exception.
            This event is raised on the thread that is running the task.
            </summary>
        </member>
        <member name="P:Recognos.Core.Threading.ITaskExecutor.Name">
            <summary>
            Gets the name of the runner. This name will be appended to the thread name of the worker threads.
            </summary>
            <value>The name of the runner.</value>
        </member>
        <member name="P:Recognos.Core.Threading.ITaskExecutor.WorkerCount">
            <summary>
            Gets the worker count.
            </summary>
            <value>The worker count.</value>
        </member>
        <member name="P:Recognos.Core.Threading.ITaskExecutor.TotalAddedTasks">
            <summary>
            Gets the total number of added tasks.
            </summary>
            <value>The total number of added tasks.</value>
        </member>
        <member name="P:Recognos.Core.Threading.ITaskExecutor.StartedTasksCount">
            <summary>
            Gets the started tasks count.
            </summary>
            <value>The started tasks count.</value>
        </member>
        <member name="P:Recognos.Core.Threading.ITaskExecutor.FinishedTasksCount">
            <summary>
            Gets the finished tasks count.
            </summary>
            <value>The finished tasks count.</value>
        </member>
        <member name="P:Recognos.Core.Threading.ITaskExecutor.RemainingTasks">
            <summary>
            Gets the remaining tasks.
            </summary>
            <value>The remaining tasks.</value>
        </member>
        <member name="P:Recognos.Core.Threading.ITaskExecutor.ErrorCount">
            <summary>
            Gets the error count.
            </summary>
            <value>The error count.</value>
        </member>
        <member name="P:Recognos.Core.Threading.ITaskExecutor.HasErrors">
            <summary>
            Gets a value indicating whether this instance has errors.
            </summary>
            <value>
            <c>true</c> if this instance has errors; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Recognos.Core.Threading.ITaskExecutor.RunAsync">
            <summary>
            Gets or sets a value indicating whether tasks are runned async.
            </summary>
            <value><c>true</c> if tasks are run async; otherwise, <c>false</c>.</value>
        </member>
        <member name="F:Recognos.Core.Threading.TaskExecutor.workers">
            <summary>
            Pool of workers used
            </summary>
        </member>
        <member name="F:Recognos.Core.Threading.TaskExecutor.waitEvent">
            <summary>
            Event used to signal the workers
            </summary>
        </member>
        <member name="F:Recognos.Core.Threading.TaskExecutor.flushEvent">
            <summary>
            Wait event used to wait when flushing tasks
            </summary>
        </member>
        <member name="F:Recognos.Core.Threading.TaskExecutor.tasks">
            <summary>
            Queue of tasks to execute
            </summary>
        </member>
        <member name="F:Recognos.Core.Threading.TaskExecutor.errors">
            <summary>
            Queue of errors produced by running the tasks
            </summary>
        </member>
        <member name="F:Recognos.Core.Threading.TaskExecutor.addedTasksCount">
            <summary>
            Total number of added tasks
            </summary>
        </member>
        <member name="F:Recognos.Core.Threading.TaskExecutor.startedTasksCount">
            <summary>
            Number of tasks for witch the execution has started
            </summary>
        </member>
        <member name="F:Recognos.Core.Threading.TaskExecutor.completedTasksCount">
            <summary>
            Number of completed tasks
            </summary>
        </member>
        <member name="F:Recognos.Core.Threading.TaskExecutor.errorCount">
            <summary>
            Number of tasks that finished with unhandeled exception
            </summary>
        </member>
        <member name="F:Recognos.Core.Threading.TaskExecutor.finished">
            <summary>
            Flag used to signal if finish has been called
            </summary>
        </member>
        <member name="F:Recognos.Core.Threading.TaskExecutor.disposed">
            <summary>
            Flag indicating whether the instanec has been disposed
            </summary>
        </member>
        <member name="M:Recognos.Core.Threading.TaskExecutor.#ctor">
            <summary>
            Initializes a new instance of the TaskExecutor class.
            The WorkerCount is set to the Number of cores
            </summary>
        </member>
        <member name="M:Recognos.Core.Threading.TaskExecutor.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the TaskExecutor class.
            </summary>
            <param name="workerCount">Number of workers to use</param>
        </member>
        <member name="M:Recognos.Core.Threading.TaskExecutor.#ctor(System.Int32,System.Boolean,System.String)">
            <summary>
            Initializes a new instance of the TaskExecutor class.
            </summary>
            <param name="workerCount">Worker count</param>
            <param name="highPriority">High priority workers</param>
            <param name="name">Name of this task runner ( used in thread names )</param>
        </member>
        <member name="M:Recognos.Core.Threading.TaskExecutor.AddTask(Recognos.Core.Threading.ITask)">
            <summary>
            Add a task to the queue
            </summary>
            <param name="task">Task to add</param>
        </member>
        <member name="M:Recognos.Core.Threading.TaskExecutor.AddTask(System.Action)">
            <summary>
            Add a task expressed as an action
            </summary>
            <param name="action">Action to add</param>
        </member>
        <member name="M:Recognos.Core.Threading.TaskExecutor.FlushTasks">
            <summary>
            Wait for all currenty added tasks to finish executing and continue waiting for tasks
            </summary>
        </member>
        <member name="M:Recognos.Core.Threading.TaskExecutor.Finish">
            <summary>
            Wait for the tasks to finish executing.
            </summary>
            <remarks>
            After calling finish, you can't add any more tasks to this runner.
            </remarks>
        </member>
        <member name="M:Recognos.Core.Threading.TaskExecutor.Dispose">
            <summary>
            Ensure the wait handles are closed
            </summary>
        </member>
        <member name="M:Recognos.Core.Threading.TaskExecutor.RunWorker">
            <summary>
            Start running the tasks
            </summary>
        </member>
        <member name="M:Recognos.Core.Threading.TaskExecutor.RunPendingTasks">
            <summary>
            Run tasks in the queue
            </summary>
        </member>
        <member name="M:Recognos.Core.Threading.TaskExecutor.RunTask(Recognos.Core.Threading.ITask)">
            <summary>
            Runs a task and monitors it for unhandeled exceptions
            </summary>
            <param name="task">Task to run</param>
        </member>
        <member name="E:Recognos.Core.Threading.TaskExecutor.OnTaskError">
            <summary>
            Event witch will be raised if a task throws an exception
            </summary>
            <remarks>
            Since the tasks are run on a worker thread and we whant this event
            to be raised on the runner's thread we can only raise it when Finish() is beeing called. 
            For an event that is raised on the worker thread <see cref="E:Recognos.Core.Threading.TaskExecutor.OnThreadTaskError"/>.
            The execution of the other queued tasks will continue evean if a task throws an exception.
            </remarks>
        </member>
        <member name="E:Recognos.Core.Threading.TaskExecutor.OnThreadTaskError">
            <summary>
            This event will be raised on the worker thread when a task throws an exception.
            The execution of the other queued tasks will continue evean if a task throws an exception.
            </summary>
        </member>
        <member name="P:Recognos.Core.Threading.TaskExecutor.DefaultWorkerCount">
            <summary>
            Gets the default worker count.
            </summary>
            <value>The default worker count.</value>
        </member>
        <member name="P:Recognos.Core.Threading.TaskExecutor.WorkerCount">
            <summary>
            Gets the number of workers
            </summary>
        </member>
        <member name="P:Recognos.Core.Threading.TaskExecutor.HasErrors">
            <summary>
            Gets a value indicating whether at least one of the tasks has thrown an error
            </summary>
        </member>
        <member name="P:Recognos.Core.Threading.TaskExecutor.RunAsync">
            <summary>
            Gets or sets a value indicating whether tasks are runned async.
            </summary>
            <value><c>true</c> if tasks are run async; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Recognos.Core.Threading.TaskExecutor.Name">
            <summary>
            Gets the name of the runner
            </summary>
        </member>
        <member name="P:Recognos.Core.Threading.TaskExecutor.TotalAddedTasks">
            <summary>
            Gets the total number of tasks that have been aded to this runner
            </summary>
        </member>
        <member name="P:Recognos.Core.Threading.TaskExecutor.StartedTasksCount">
            <summary>
            Gets the total number of tasks that have been started by this runner
            </summary>
        </member>
        <member name="P:Recognos.Core.Threading.TaskExecutor.FinishedTasksCount">
            <summary>
            Gets the total number of tasks that this runner has executed succesfully
            </summary>
        </member>
        <member name="P:Recognos.Core.Threading.TaskExecutor.ErrorCount">
            <summary>
            Gets the total number of tasks that ended with an unhandeled exception
            </summary>
        </member>
        <member name="P:Recognos.Core.Threading.TaskExecutor.RemainingTasks">
            <summary>
            Gets the number of remaining tasks to execute
            </summary>
        </member>
        <member name="T:Recognos.Core.Collections.ThreadSafeDictionary`2">
            <summary>
            Implementation for a thread safe dictionary based on ReaderWriterLockSlim.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
        </member>
        <member name="T:Recognos.Core.Collections.IThreadSafeDictionary`2">
            <summary>
            Interface for a thread safe IDictionary implementation.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
        </member>
        <member name="M:Recognos.Core.Collections.IThreadSafeDictionary`2.MergeSafe(`0,`1)">
            <summary>
            Merge is similar to the SQL merge or upsert statement.
            </summary>
            <param name="key">Key to lookup</param>
            <param name="newValue">New Value to add</param>
        </member>
        <member name="M:Recognos.Core.Collections.IThreadSafeDictionary`2.RemoveSafe(`0)">
            <summary>
            This is a blind remove. Prevents the need to check for existence first.
            </summary>
            <param name="key">Key to Remove</param>
        </member>
        <member name="F:Recognos.Core.Collections.ThreadSafeDictionary`2.storage">
            <summary>
            This is the internal dictionary that we are wrapping
            </summary>
        </member>
        <member name="F:Recognos.Core.Collections.ThreadSafeDictionary`2.dictionaryLock">
            <summary>
            The lock used for sincronization
            </summary>
        </member>
        <member name="M:Recognos.Core.Collections.ThreadSafeDictionary`2.RemoveSafe(`0)">
            <summary>
            This is a blind remove. Prevents the need to check for existence first.
            </summary>
            <param name="key">Key to remove</param>
        </member>
        <member name="M:Recognos.Core.Collections.ThreadSafeDictionary`2.MergeSafe(`0,`1)">
            <summary>
            Merge does a blind remove, and then add.  Basically a blind Upsert.  
            </summary>
            <param name="key">Key to lookup</param>
            <param name="newValue">New Value to add</param>
        </member>
        <member name="M:Recognos.Core.Collections.ThreadSafeDictionary`2.Remove(`0)">
            <summary>
            Removes the element with the specified key from the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <param name="key">The key of the element to remove.</param>
            <returns>
            true if the element is successfully removed; otherwise, false.  This method also returns false if <paramref name="key"/> was not found in the original <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is null.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.IDictionary`2"/> is read-only.
            </exception>
        </member>
        <member name="M:Recognos.Core.Collections.ThreadSafeDictionary`2.ContainsKey(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.IDictionary`2"/> contains an element with the specified key.
            </summary>
            <param name="key">The key to locate in the <see cref="T:System.Collections.Generic.IDictionary`2"/>.</param>
            <returns>
            true if the <see cref="T:System.Collections.Generic.IDictionary`2"/> contains an element with the key; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is null.
            </exception>
        </member>
        <member name="M:Recognos.Core.Collections.ThreadSafeDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key whose value to get.</param>
            <param name="value">When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the <paramref name="value"/> parameter. This parameter is passed uninitialized.</param>
            <returns>
            true if the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"/> contains an element with the specified key; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is null.
            </exception>
        </member>
        <member name="M:Recognos.Core.Collections.ThreadSafeDictionary`2.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </exception>
        </member>
        <member name="M:Recognos.Core.Collections.ThreadSafeDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:Recognos.Core.Collections.ThreadSafeDictionary`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </exception>
        </member>
        <member name="M:Recognos.Core.Collections.ThreadSafeDictionary`2.Add(`0,`1)">
            <summary>
            Adds an element with the provided key and value to the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <param name="key">The object to use as the key of the element to add.</param>
            <param name="value">The object to use as the value of the element to add.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            An element with the same key already exists in the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.IDictionary`2"/> is read-only.
            </exception>
        </member>
        <member name="M:Recognos.Core.Collections.ThreadSafeDictionary`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </exception>
        </member>
        <member name="M:Recognos.Core.Collections.ThreadSafeDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="arrayIndex"/> is less than 0.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="array"/> is multidimensional.
            -or-
            <paramref name="arrayIndex"/> is equal to or greater than the length of <paramref name="array"/>.
            -or-
            The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"/> is greater than the available space from <paramref name="arrayIndex"/> to the end of the destination <paramref name="array"/>.
            -or-
            Type T cannot be cast automatically to the type of the destination <paramref name="array"/>.
            </exception>
        </member>
        <member name="M:Recognos.Core.Collections.ThreadSafeDictionary`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <remarks>
            This method is not thread safe. Enumerating a dictionary is not thread safe.
            Supported mostly for serialization.
            </remarks>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Recognos.Core.Collections.ThreadSafeDictionary`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <remarks>
            This method is not thread safe. Enumerating a dictionary is not thread safe.
            </remarks>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:Recognos.Core.Collections.ThreadSafeDictionary`2.Keys">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"/> containing the keys of the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <value></value>
            <returns>
            An <see cref="T:System.Collections.Generic.ICollection`1"/> containing the keys of the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </returns>
        </member>
        <member name="P:Recognos.Core.Collections.ThreadSafeDictionary`2.Values">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"/> containing the values in the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <value></value>
            <returns>
            An <see cref="T:System.Collections.Generic.ICollection`1"/> containing the values in the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </returns>
        </member>
        <member name="P:Recognos.Core.Collections.ThreadSafeDictionary`2.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <value></value>
            <returns>
            The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
        </member>
        <member name="P:Recognos.Core.Collections.ThreadSafeDictionary`2.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only; otherwise, false.
            </returns>
        </member>
        <member name="P:Recognos.Core.Collections.ThreadSafeDictionary`2.Item(`0)">
            <summary>
            Gets or sets the value with the specified key.
            </summary>
            <value>
            The value from the dictionary
            </value>
            <param name="key">The key of the item.</param>
            <returns>
            The element with the specified key.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="key"/> is null.
            </exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">
            The property is retrieved and <paramref name="key"/> is not found.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The property is set and the <see cref="T:System.Collections.Generic.IDictionary`2"/> is read-only.
            </exception>
        </member>
        <member name="T:Recognos.Core.Collections.QueryExtensions">
            <summary>
            Helper extension methods for expressing linq queries.
            </summary>
        </member>
        <member name="M:Recognos.Core.Collections.QueryExtensions.ApplyIf``1(System.Linq.IQueryable{``0},System.Boolean,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Applies the <paramref name="filter"/> to the <paramref name="query"/> if the <paramref name="apply"/> parameter is true. 
            </summary>
            <typeparam name="T">Type of objects in the query</typeparam>
            <param name="query">The query.</param>
            <param name="apply">if set to <c>true</c> applies the filter to the query.</param>
            <param name="filter">The filter to apply.</param>
            <returns>The new query.</returns>
        </member>
        <member name="M:Recognos.Core.Collections.QueryExtensions.ApplyIfNotNull``2(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Applies the <paramref name="filter"/> to the <paramref name="query"/> if the <paramref name="value"/> parameter is not null.
            </summary>
            <typeparam name="T">Type of objects in the query.</typeparam>
            <typeparam name="U">Type of the object to check if is null.</typeparam>
            <param name="query">The query.</param>
            <param name="value">The value.</param>
            <param name="filter">The filter to apply.</param>
            <returns>The new query.</returns>
        </member>
        <member name="M:Recognos.Core.Collections.QueryExtensions.ApplyIfNotEmpty``1(System.Linq.IQueryable{``0},System.String,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Applies the <paramref name="filter"/> to the <paramref name="query"/> if the <paramref name="value"/> parameter is not empty.
            </summary>
            <typeparam name="T">Type of objects in the query.</typeparam>
            <param name="query">The query.</param>
            <param name="value">The value.</param>
            <param name="filter">The filter to apply.</param>
            <returns>The new query.</returns>
        </member>
        <member name="M:Recognos.Core.Collections.QueryExtensions.ApplyIfNotEmpty``1(System.Linq.IQueryable{``0},System.Guid,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Applies the <paramref name="filter"/> to the <paramref name="query"/> if the <paramref name="value"/> parameter is not empty.
            </summary>
            <typeparam name="T">Type of objects in the query.</typeparam>
            <param name="query">The query.</param>
            <param name="value">The value.</param>
            <param name="filter">The filter to apply.</param>
            <returns>The new query.</returns>
        </member>
        <member name="M:Recognos.Core.Collections.QueryExtensions.ApplyIfNotEmpty``1(System.Linq.IQueryable{``0},System.Nullable{System.Guid},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Applies the <paramref name="filter"/> to the <paramref name="query"/> if the <paramref name="value"/> parameter is not empty.
            </summary>
            <typeparam name="T">Type of objects in the query.</typeparam>
            <param name="query">The query.</param>
            <param name="value">The value.</param>
            <param name="filter">The filter to apply.</param>
            <returns>The new query.</returns>
        </member>
        <member name="M:Recognos.Core.Collections.QueryExtensions.ApplyIfNotEmpty``1(System.Linq.IQueryable{``0},System.DateTime,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Applies the <paramref name="filter"/> to the <paramref name="query"/> if the <paramref name="value"/> parameter is not empty.
            </summary>
            <typeparam name="T">Type of objects in the query.</typeparam>
            <param name="query">The query.</param>
            <param name="value">The value.</param>
            <param name="filter">The filter to apply.</param>
            <returns>The new query.</returns>
        </member>
        <member name="M:Recognos.Core.Collections.QueryExtensions.ApplyIfNotEmpty``1(System.Linq.IQueryable{``0},System.Nullable{System.DateTime},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Applies the <paramref name="filter"/> to the <paramref name="query"/> if the <paramref name="value"/> parameter is not empty.
            </summary>
            <typeparam name="T">Type of objects in the query.</typeparam>
            <param name="query">The query.</param>
            <param name="value">The value.</param>
            <param name="filter">The filter to apply.</param>
            <returns>The new query.</returns>
        </member>
        <member name="M:Recognos.Core.Collections.QueryExtensions.ApplyIfNotEmpty``2(System.Linq.IQueryable{``0},``1[],System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Applies the <paramref name="filter"/> to the <paramref name="query"/> if the <paramref name="values"/> parameter is not empty.
            </summary>
            <typeparam name="T">Type of objects in the query.</typeparam>
            <typeparam name="U">Type of objects in the arrat.</typeparam>
            <param name="query">The query.</param>
            <param name="values">The values.</param>
            <param name="filter">The filter.</param>
            <returns>The new query.</returns>
        </member>
        <member name="M:Recognos.Core.Collections.QueryExtensions.ApplyIfNotEmpty``2(System.Linq.IQueryable{``0},System.Nullable{``1},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Applies the <paramref name="filter"/> to the <paramref name="query"/> if the <paramref name="value"/> parameter has a value.
            </summary>
            <typeparam name="T">Type of objects in the query.</typeparam>
            <typeparam name="U">Type of value object.</typeparam>
            <param name="query">The query.</param>
            <param name="value">The value.</param>
            <param name="filter">The filter.</param>
            <returns>
            The new query.
            </returns>
        </member>
        <member name="M:Recognos.Core.Collections.QueryExtensions.ApplyIfNotEmpty``2(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Applies the <paramref name="filter"/> to the <paramref name="query"/> if the <paramref name="values"/> parameter is not empty.
            </summary>
            <typeparam name="T">Type of objects in the query.</typeparam>
            <typeparam name="U">Type of objects in the arrat.</typeparam>
            <param name="query">The query.</param>
            <param name="values">The values.</param>
            <param name="filter">The filter.</param>
            <returns>The new query.</returns>
        </member>
        <member name="M:Recognos.Core.Collections.QueryExtensions.ApplyIfNotEmpty``1(System.Linq.IQueryable{``0},System.String[],System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Depending on the values on the <paramref name="values"/> array, applies no filer, <paramref name="filterSingleValue"/>
            or <paramref name="filterMultipleValues"/> to the <paramref name="query"/>
            </summary>
            <typeparam name="T">Type of objects in the query.</typeparam>
            <param name="query">The query.</param>
            <param name="values">The values.</param>
            <param name="filterSingleValue">The filter single value.</param>
            <param name="filterMultipleValues">The filter multi value.</param>
            <returns>The new query.</returns>
        </member>
        <member name="M:Recognos.Core.Collections.QueryExtensions.ApplyIfNotEmptyWithCondition``2(System.Linq.IQueryable{``0},``1[],System.Boolean,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Depending on the values on the <paramref name="values"/> array, applies no filer, <paramref name="filterConditionTrue"/>
            or <paramref name="filterConditionFalse"/> to the <paramref name="query"/>
            </summary>
            <typeparam name="T">Type of objects in the query.</typeparam>
            <typeparam name="U">Type of objects in the values</typeparam>
            <param name="query">The query.</param>
            <param name="values">The values.</param>
            <param name="condition">if set to <c>true</c> apply the filterConditionTrue.</param>
            <param name="filterConditionTrue">The filter to apply when the condition is true.</param>
            <param name="filterConditionFalse">The filter to apply when the condition" is false.</param>
            <returns>The new query.</returns>
        </member>
        <member name="M:Recognos.Core.Collections.QueryExtensions.ApplyIfNotEmptyWithCondition``1(System.Linq.IQueryable{``0},System.String,System.Boolean,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Depending on the <paramref name="value"/> parameter, applies no filer, <paramref name="filterConditionTrue"/>
            or <paramref name="filterConditionFalse"/> to the <paramref name="query"/>
            </summary>
            <typeparam name="T">Type of objects in the query.</typeparam>
            <param name="query">The query.</param>
            <param name="value">The value.</param>
            <param name="condition">if set to <c>true</c> applies filterConditionTrue.</param>
            <param name="filterConditionTrue">The filter condition true.</param>
            <param name="filterConditionFalse">The filter condition false.</param>
            <returns>The new query.</returns>
        </member>
        <member name="M:Recognos.Core.Collections.QueryExtensions.OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Boolean)">
            <summary>
            Returns a new query that has an order by clause applied
            </summary>
            <typeparam name="T">Type of objects in the query.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="query">The query.</param>
            <param name="keySelector">The key selector.</param>
            <param name="descending">if set to <c>true</c> order descending.</param>
            <returns>The new query.</returns>
        </member>
        <member name="M:Recognos.Core.Collections.QueryExtensions.OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.ComponentModel.ListSortDirection)">
            <summary>
            Returns a new query that has an order by clause applied
            </summary>
            <typeparam name="T">Type of objects in the query.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="query">The query.</param>
            <param name="keySelector">The key selector.</param>
            <param name="direction">The direction.</param>
            <returns>The new query.</returns>
        </member>
        <member name="M:Recognos.Core.Collections.QueryExtensions.OrderBy``2(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{Recognos.Core.Collections.Pair{System.Linq.Expressions.Expression{System.Func{``0,``1}},System.ComponentModel.ListSortDirection}})">
            <summary>
            Returns a new query that has an order by clause applied
            </summary>
            <typeparam name="T">Type of objects in the query.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="query">The query.</param>
            <param name="sortDescriptor">The sort descriptor.</param>
            <returns>The new query.</returns>
        </member>
        <member name="T:Recognos.Core.Collections.Pagination">
            <summary>
            Implementation for the pagination object
            </summary>
        </member>
        <member name="T:Recognos.Core.Collections.IPagination">
            <summary>
            model pagination data on a collection 
            </summary>
        </member>
        <member name="M:Recognos.Core.Collections.IPagination.Clone">
            <summary>
            Clone the current object
            </summary>
            <returns>The clone of the current object</returns>
        </member>
        <member name="M:Recognos.Core.Collections.IPagination.SelectCurrentPage``1(System.Linq.IQueryable{``0})">
            <summary> 
            Retrvieves the total number of records. query.Count() will be executed.
            Applys filters skyp() and take() to select the current page
            </summary>
            <param name="query">query on witch to perform pagination.</param>
            <returns>IQuerable for the current page</returns>
            <typeparam name="T">Type od the data in the page</typeparam>
        </member>
        <member name="P:Recognos.Core.Collections.IPagination.TotalRecords">
            <summary>
            Gets the total number of records
            </summary>
        </member>
        <member name="P:Recognos.Core.Collections.IPagination.RecordsPerPage">
            <summary>
            Gets or sets the number of records per page
            </summary>
        </member>
        <member name="P:Recognos.Core.Collections.IPagination.CurrentPage">
            <summary>
            Gets or sets the index of the current page. First page is 0 and Last page is Total Pages - 1 
            </summary>
        </member>
        <member name="P:Recognos.Core.Collections.IPagination.TotalPages">
            <summary>
            Gets the total number of pages
            </summary>
        </member>
        <member name="P:Recognos.Core.Collections.IPagination.HasNextPage">
            <summary>
            Gets a value indicating whether the current page is not first 
            </summary>
        </member>
        <member name="P:Recognos.Core.Collections.IPagination.HasPreviousPage">
            <summary>
            Gets a value indicating whether the current page is not last 
            </summary>
        </member>
        <member name="F:Recognos.Core.Collections.Pagination.currentPage">
            <summary>
            current page
            </summary>
        </member>
        <member name="M:Recognos.Core.Collections.Pagination.#ctor">
            <summary>
            Initializes a new instance of the Pagination class.
            Default value for RecordsPerPage is 1.
            </summary>
        </member>
        <member name="M:Recognos.Core.Collections.Pagination.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the Pagination class.
            </summary>
            <param name="recordsPerPage">recors per page</param>
        </member>
        <member name="M:Recognos.Core.Collections.Pagination.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Recognos.Core.Collections.Pagination"/> class.
            </summary>
            <param name="recordsPerPage">The number of records per page.</param>
            <param name="currentPage">The current page.</param>
        </member>
        <member name="M:Recognos.Core.Collections.Pagination.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the Pagination class.
            </summary>
            <param name="total">total number of objects</param>
            <param name="perPage">records per page</param>
            <param name="currentPage">current page index</param>
        </member>
        <member name="M:Recognos.Core.Collections.Pagination.SelectCurrentPage``1(System.Linq.IQueryable{``0})">
            <summary>
            Return a query for slecting a page from another query
            </summary>
            <typeparam name="T">type of data</typeparam>
            <param name="query">original query</param>
            <returns>query for selecting a page</returns>
        </member>
        <member name="M:Recognos.Core.Collections.Pagination.Clone">
            <summary>
            clone the current pagination object
            </summary>
            <returns>a new pagination object with the same values</returns>
        </member>
        <member name="P:Recognos.Core.Collections.Pagination.TotalRecords">
            <summary>
            Gets the total number of records
            </summary>
        </member>
        <member name="P:Recognos.Core.Collections.Pagination.RecordsPerPage">
            <summary>
            Gets or sets the number of records per page
            </summary>
        </member>
        <member name="P:Recognos.Core.Collections.Pagination.CurrentPage">
            <summary>
            Gets or sets the index of the current page
            </summary>
        </member>
        <member name="P:Recognos.Core.Collections.Pagination.TotalPages">
            <summary>
            Gets the total number of pages
            </summary>
        </member>
        <member name="P:Recognos.Core.Collections.Pagination.HasPreviousPage">
            <summary>
            Gets a value indicating whether the current page is not first 
            </summary>
        </member>
        <member name="P:Recognos.Core.Collections.Pagination.HasNextPage">
            <summary>
            Gets a value indicating whether the current page is not last 
            </summary>
        </member>
        <member name="T:Recognos.Core.Caching.CachingExtensions">
            <summary>
            Various extension methods related to caching
            </summary>
        </member>
        <member name="M:Recognos.Core.Caching.CachingExtensions.Cached``1(System.Linq.IQueryable{``0},System.String,Recognos.Core.Caching.ICache,Recognos.Core.Caching.IExpirationPolicyProvider)">
            <summary>
            Return a query from cache. If the query is not already cached then its executed
            and the result is cached and returned next time the query is requested
            </summary>
            <typeparam name="T">Type of the objects in the cache</typeparam>
            <param name="query">Query to cache</param>
            <param name="key">Key to used</param>
            <param name="cache">Cache manager</param>
            <param name="policyProvider">Object providing expiration information</param>
            <returns>The executed query</returns>
        </member>
        <member name="M:Recognos.Core.Caching.CachingExtensions.Cached``1(System.Linq.IQueryable{``0},System.String,Recognos.Core.Caching.ICache,Recognos.Core.Caching.ICommandProvider)">
            <summary>
            Return a query from cache. If the query is not already cached then its executed
            and the result is cached and returned next time the query is requested.
            Also passes a command provider for SQL Cache dependency
            </summary>
            <typeparam name="T">Type of the objects in the cache</typeparam>
            <param name="query">Query to cache</param>
            <param name="key">Key to used</param>
            <param name="cache">Cache manager</param>
            <param name="commandProvider">Object used get the DbCommand for cache dependency</param>
            <returns>The executed query</returns>
        </member>
        <member name="M:Recognos.Core.Caching.CachingExtensions.Cached``1(System.Linq.IQueryable{``0},System.String,Recognos.Core.Caching.ICache)">
            <summary>
            Return a query from cache. If the query is not already cached then its executed
            and the result is cached and returned next time the query is requested
            </summary>
            <typeparam name="T">Type of the objects in the cache</typeparam>
            <param name="query">Query to cache</param>
            <param name="key">Key to used</param>
            <param name="cache">Cache manager</param>
            <returns>The executed query</returns>
        </member>
        <member name="T:Recognos.Core.Threading.ReadOnlyLock">
            <summary>
            Implementation for a Read Only Lock based on ReaderWriterLockSlim
            </summary>
        </member>
        <member name="M:Recognos.Core.Threading.ReadOnlyLock.#ctor(System.Threading.ReaderWriterLockSlim)">
            <summary>
            Initializes a new instance of the <see cref="T:Recognos.Core.Threading.ReadOnlyLock"/> class.
            </summary>
            <param name="locks">The locks.</param>
        </member>
        <member name="M:Recognos.Core.Threading.ReadOnlyLock.DoDispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Recognos.Core.IOC.IObjectRegistry">
            <summary>
            Interface for a dependency injection container used to configure objects.
            </summary>
            <remarks>
            If possible use Autofac
            </remarks>
        </member>
        <member name="M:Recognos.Core.IOC.IObjectRegistry.RegisterSingleton``1(``0)">
            <summary>
            Registers the given instance as the singleton that will be returned for the given type.
            </summary>
            <typeparam name="T">Type of the instance to register.</typeparam>
            <param name="instance">The instance.</param>
        </member>
        <member name="M:Recognos.Core.IOC.IObjectRegistry.RegisterType``1">
            <summary>
            Registers the given type in the container.
            </summary>
            <typeparam name="T">Type to register.</typeparam>
        </member>
        <member name="M:Recognos.Core.IOC.IObjectRegistry.RegisterSingleton(System.Type,System.Object)">
            <summary>
            Registers the given instance as the singleton that will be returned for the given type.
            </summary>
            <param name="type">The type to register.</param>
            <param name="instance">The instance.</param>
        </member>
        <member name="M:Recognos.Core.IOC.IObjectRegistry.RegisterType(System.Type)">
            <summary>
            Registers the given type in the container.
            </summary>
            <param name="type">The type to register.</param>
        </member>
        <member name="T:Recognos.Core.IOC.ObjectFactory">
            <summary>
            Generic object factory backed by a DI container.
            </summary>
            <remarks>
            If possible use Autofac
            </remarks>
        </member>
        <member name="T:Recognos.Core.IOC.IObjectFactory">
            <summary>
            Interface for object factories
            </summary>
            <remarks>
            If possible use Autofac
            </remarks>
        </member>
        <member name="M:Recognos.Core.IOC.IObjectFactory.CreateInstance``1">
            <summary>
            Creates an instance of type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">Type of instance to create.</typeparam>
            <returns>A instance of type <typeparamref name="T"/></returns>
        </member>
        <member name="M:Recognos.Core.IOC.IObjectFactory.CreateInstance(System.Type)">
            <summary>
            Creates an instance of type <paramref name="type"/>.
            </summary>
            <param name="type">The type of instance to create.</param>
            <returns>A instance of type <paramref name="type"/></returns>
        </member>
        <member name="M:Recognos.Core.IOC.IObjectFactory.ReleaseInstance(System.Object)">
            <summary>
            Releases the instance.
            </summary>
            <remarks>
            If the instance implements <see cref="T:System.IDisposable"/> it will be disposed.
            </remarks>
            <param name="instance">The instance.</param>
        </member>
        <member name="M:Recognos.Core.IOC.ObjectFactory.CreateInstance(System.Type)">
            <summary>
            Creates an instance of the type <paramref name="type"/>.
            </summary>
            <param name="type">The type of the instance to create.</param>
            <returns>The instance that has been created.</returns>
        </member>
        <member name="M:Recognos.Core.IOC.ObjectFactory.ReleaseInstance(System.Object)">
            <summary>
            Releases the instance.
            </summary>
            <param name="instance">The instance.</param>
        </member>
        <member name="M:Recognos.Core.IOC.ObjectFactory.CreateInstance``1">
            <summary>
            Creates an instance of type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">Type of instance to create.</typeparam>
            <returns>
            A instance of type <typeparamref name="T"/>
            </returns>
        </member>
        <member name="T:Recognos.Core.Caching.ExpirationPolicyProvider">
            <summary>
            Default implementation for an expiration policy provider
            </summary>
        </member>
        <member name="F:Recognos.Core.Caching.ExpirationPolicyProvider.commandProvider">
            <summary>
            The command provider for creating dependencies dependency 
            </summary>
        </member>
        <member name="M:Recognos.Core.Caching.ExpirationPolicyProvider.#cctor">
            <summary>
            Initializes static members of the ExpirationPolicyProvider class.
            </summary>
        </member>
        <member name="M:Recognos.Core.Caching.ExpirationPolicyProvider.#ctor">
            <summary>
            Initializes a new instance of the ExpirationPolicyProvider class.
            </summary>
        </member>
        <member name="M:Recognos.Core.Caching.ExpirationPolicyProvider.CommandBasedExpiration(Recognos.Core.Caching.ICommandProvider)">
            <summary>
            Return an ExpirationPolicyProvider based on a command provider ( data context )
            Used to manage the creation of SQL Cache dependencies from DbCommands
            </summary>
            <param name="provider">The command provider</param>
            <returns>An Expiration policy provider</returns>
        </member>
        <member name="M:Recognos.Core.Caching.ExpirationPolicyProvider.GetPolicyFor``1(``0)">
            <summary>
            Return a default expiration policy for an object
            </summary>
            <typeparam name="T">Type of the object</typeparam>
            <param name="objectToCache">Object to cache</param>
            <returns>The expiration policy</returns>
        </member>
        <member name="P:Recognos.Core.Caching.ExpirationPolicyProvider.DefaultProvider">
            <summary>
            Gets or sets the static instance for a Default Provider
            </summary>
        </member>
        <member name="T:Recognos.Core.Modeling.IUnitOfWork">
            <summary>
            Interface for a Unit of Work implementation
            </summary>
        </member>
        <member name="M:Recognos.Core.Modeling.IUnitOfWork.Begin">
            <summary>
            Begins the current unit of work.
            </summary>
        </member>
        <member name="M:Recognos.Core.Modeling.IUnitOfWork.Complete">
            <summary>
            Completes the current unit of work
            </summary>
        </member>
        <member name="M:Recognos.Core.Modeling.IUnitOfWork.Abort">
            <summary>
            Aborts the current unit of work
            </summary>
        </member>
        <member name="T:Recognos.Core.Caching.ICommandProvider">
            <summary>
            Provider of comands exeduted by a linq query
            </summary>
        </member>
        <member name="M:Recognos.Core.Caching.ICommandProvider.GetCommand``1(``0)">
            <summary>
            Builds the db command with is executed by a linq query
            </summary>
            <typeparam name="T">Type of objects the linq query returns</typeparam>
            <param name="query">The query for witch the command is requested</param>
            <returns>The db command</returns>
        </member>
        <member name="T:Recognos.Core.Context.IContextualStorage`1">
            <summary>
            Interface for context dependent storage.
            </summary>
            <typeparam name="T">The type of the value stored in the context.</typeparam>
        </member>
        <member name="M:Recognos.Core.Context.IContextualStorage`1.ResetCurrent">
            <summary>
            Resets the current value in the context to a new value. 
            Can be used to reinitialize the current context.
            </summary>
        </member>
        <member name="P:Recognos.Core.Context.IContextualStorage`1.Current">
            <summary>
            Gets the current value in the context.
            </summary>
            <value>The current value in the context.</value>
        </member>
        <member name="T:Recognos.Core.Collections.GroupingCollection`2">
            <summary>
            Custom implementation for IGrouping
            </summary>
            <typeparam name="T">type of the elements in the collection</typeparam>
            <typeparam name="TKey">type of the key</typeparam>
        </member>
        <member name="M:Recognos.Core.Collections.GroupingCollection`2.#ctor(`1,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the GroupingCollection class
            </summary>
            <param name="key">key of the colection</param>
            <param name="data">collection of elements</param>
        </member>
        <member name="P:Recognos.Core.Collections.GroupingCollection`2.Key">
            <summary>
            Gets or sets the key of the collection
            </summary>
        </member>
        <member name="T:Recognos.Core.UriExtensions">
            <summary>
            Useful extensions for Uri processing.
            </summary>
        </member>
        <member name="F:Recognos.Core.UriExtensions.UriExpression">
            <summary>
            Regular expression for matching uris
            </summary>
        </member>
        <member name="M:Recognos.Core.UriExtensions.ExtractUris(System.String)">
            <summary>
            Extracts the uris from a string.
            </summary>
            <param name="input">The input string.</param>
            <returns>A collection of Uris</returns>
        </member>
        <member name="M:Recognos.Core.UriExtensions.IsWeb(System.Uri)">
            <summary>
            Determines whether the specified URI is a web uri (http or https).
            </summary>
            <param name="uri">The URI.</param>
            <returns>
              <c>true</c> if the specified URI is http or https; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Recognos.Core.UriExtensions.ResolveRedirects(System.Uri)">
            <summary>
            Resolves the redirects for the specified URI is required.
            </summary>
            <remarks>
            If http errors are encountered the input uri is returned.
            </remarks>
            <param name="uri">The URI.</param>
            <returns>The final uri after following the redirects.</returns>
        </member>
        <member name="M:Recognos.Core.UriExtensions.ResolveRedirects(System.Uri,System.Func{System.Net.WebException,System.Uri})">
            <summary>
            Resolves the redirects for the specified URI is required.
            </summary>
            <param name="uri">The URI.</param>
            <param name="error">Action to be performed when http error is encountered.</param>
            <returns>The final uri after following the redirects.</returns>
        </member>
        <member name="M:Recognos.Core.UriExtensions.DownloadString(System.Uri)">
            <summary>
            Downloads the content from the <paramref name="uri"/> as a string.
            </summary>
            <param name="uri">The URI to download.</param>
            <returns>The content as a string.</returns>
        </member>
        <member name="M:Recognos.Core.UriExtensions.DownloadData(System.Uri)">
            <summary>
            Downloads the content from the <paramref name="uri"/> as a byte array.
            </summary>
            <param name="uri">The URI to download.</param>
            <returns>The content as a byte array.</returns>
        </member>
        <member name="T:Recognos.Core.StringExtensions">
            <summary>
            Various extension methods for string operations.
            </summary>
        </member>
        <member name="F:Recognos.Core.StringExtensions.TagsPattern">
            <summary>
            Regex pattern for matching tags.
            </summary>
            <remarks>
            We consider a tag to have a max 1000 chars inside opening and closing chars to avoid <see cref="T:System.OutOfMemoryException"/> Exceptions. 
            This limit accounts for tag attributes which on generated documents can be quite large.
            </remarks>
        </member>
        <member name="F:Recognos.Core.StringExtensions.GuidPattern">
            <summary>
            The regex pattern for a guid.
            </summary>
        </member>
        <member name="F:Recognos.Core.StringExtensions.guidExpression">
            <summary>
            Regular expression to match a guid.
            </summary>
        </member>
        <member name="F:Recognos.Core.StringExtensions.tagsExpression">
            <summary>
            Regular expression to match and remove tags.
            </summary>
        </member>
        <member name="F:Recognos.Core.StringExtensions.whitespace">
            <summary>
            Whitespace constant use for optimizing tags replacement.
            </summary>
        </member>
        <member name="M:Recognos.Core.StringExtensions.NullSafe(System.String)">
            <summary>
            Return an empty string if the input is null, otherwise return the input
            </summary>
            <param name="input">Input string</param>
            <returns>An empty string if the input is null, otherwise return the input</returns>
        </member>
        <member name="M:Recognos.Core.StringExtensions.NullSafeLength(System.String)">
            <summary>
            Returns the length of the string or 0 if <paramref name="input"/> is null.
            </summary>
            <param name="input">The input.</param>
            <returns>The length of the string.</returns>
        </member>
        <member name="M:Recognos.Core.StringExtensions.CaseInsensitiveEquals(System.String,System.String)">
            <summary>
            Determines whether this string and a specified System.String object have the same value ignoring their casing.
            </summary>
            <remarks>
            if source or other is null returns false
            </remarks>
            <param name="source">The source string.</param>
            <param name="other">The other string.</param>
            <returns>true if the value of the value parameter is the same as this string; otherwise, false</returns>
        </member>
        <member name="M:Recognos.Core.StringExtensions.CaseSensitiveEquals(System.String,System.String)">
            <summary>
            Determines whether this string and a specified System.String 
            object have the same value taking their casing into account.
            </summary>
            <remarks>
            if source or other is null returns false
            </remarks>
            <param name="source">The source string.</param>
            <param name="other">The other string.</param>
            <returns>true if the value of the value parameter is the same as this string; otherwise, false</returns>
        </member>
        <member name="M:Recognos.Core.StringExtensions.CaseSensitiveStartsWith(System.String,System.String)">
            <summary>
            Determines whether the source starts with other in a case sensitive way.
            </summary>
            <param name="source">The source.</param>
            <param name="other">The other.</param>
            <returns>true is the source starts with other, otherwise false.</returns>
        </member>
        <member name="M:Recognos.Core.StringExtensions.CaseSensitiveEndsWith(System.String,System.String)">
            <summary>
            Determines whether the source ends with other in a case sensitive way.
            </summary>
            <param name="source">The source.</param>
            <param name="other">The other.</param>
            <returns>true is the source ends with other, otherwise false.</returns>
        </member>
        <member name="M:Recognos.Core.StringExtensions.CaseInsensitiveStartsWith(System.String,System.String)">
            <summary>
            Determines whether the source starts with other in a case insensitive way.
            </summary>
            <param name="source">The source.</param>
            <param name="other">The other.</param>
            <returns>true is the source starts with other, otherwise false.</returns>
        </member>
        <member name="M:Recognos.Core.StringExtensions.CaseInsensitiveEndsWith(System.String,System.String)">
            <summary>
            Determines whether the source ends with other in a case insensitive way.
            </summary>
            <param name="source">The source.</param>
            <param name="other">The other.</param>
            <returns>true is the source ends with other, otherwise false.</returns>
        </member>
        <member name="M:Recognos.Core.StringExtensions.CaseSensitiveContains(System.String,System.String)">
            <summary>
            Determines whether the source contains other in a case sensitive way.
            </summary>
            <param name="source">The source.</param>
            <param name="other">The other.</param>
            <returns>true is the source contains other, otherwise false.</returns>
        </member>
        <member name="M:Recognos.Core.StringExtensions.CaseSensitiveContains(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Determines whether the source contains other in a case sensitive way.
            </summary>
            <param name="source">The source.</param>
            <param name="other">The other.</param>
            <returns>true is the source contains other, otherwise false.</returns>
        </member>
        <member name="M:Recognos.Core.StringExtensions.CaseInsensitiveContains(System.String,System.String)">
            <summary>
            Determines whether the source contains other in a case insensitive way.
            </summary>
            <param name="source">The source.</param>
            <param name="other">The other.</param>
            <returns>true is the source contains other, otherwise false.</returns>
        </member>
        <member name="M:Recognos.Core.StringExtensions.CaseInsensitiveContains(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Determines whether the source contains other in a case insensitive way.
            </summary>
            <param name="source">The source.</param>
            <param name="other">The other.</param>
            <returns>true is the source contains other, otherwise false.</returns>
        </member>
        <member name="M:Recognos.Core.StringExtensions.StripTags(System.String)">
            <summary>
            Strips the tags from a string.
            </summary>
            <param name="source">The source string.</param>
            <returns>A string without tags.</returns>
        </member>
        <member name="M:Recognos.Core.StringExtensions.StripTags(System.String,System.Boolean)">
            <summary>
            Strips the tags from a string.
            </summary>
            <param name="source">The source string.</param>
            <param name="replaceWithSpaces">if set to <c>true</c> the tags shold be replaced with spaces.</param>
            <returns>A string without tags.</returns>
        </member>
        <member name="M:Recognos.Core.StringExtensions.StripHTML(System.String)">
            <summary>
            Strips all HTML tags from a string and replaces the tags with the specified replacement
            </summary>
            <param name="html">The HTML string.</param>
            <returns>The resulting string.</returns>
        </member>
        <member name="M:Recognos.Core.StringExtensions.MakeString(System.Char,System.Int32)">
            <summary>
            Makes a string containing <paramref name="chars"/> number of <paramref name="value"/> characthers.
            </summary>
            <param name="value">The @char.</param>
            <param name="chars">The chars.</param>
            <returns>The created string.</returns>
        </member>
        <member name="M:Recognos.Core.StringExtensions.Join(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Joins the specified collection into a string.
            </summary>
            <param name="collection">The collection.</param>
            <param name="separator">The separator.</param>
            <returns>The joined string</returns>
        </member>
        <member name="M:Recognos.Core.StringExtensions.Join(System.Collections.Generic.IEnumerable{System.String},System.String,System.String)">
            <summary>
            Joins the specified collection into a string.
            </summary>
            <param name="collection">The collection.</param>
            <param name="separator">The separator.</param>
            <param name="emptyValue">String to return if the collection is empty.</param>
            <returns>
            The joined string
            </returns>
        </member>
        <member name="M:Recognos.Core.StringExtensions.ToEnum``1(System.String)">
            <summary>
            Convert from the string value to an enumeration value
            </summary>
            <typeparam name="T">Type of the enumeration.</typeparam>
            <param name="value">The value to convert.</param>
            <returns>The enumeration value.</returns>
        </member>
        <member name="M:Recognos.Core.StringExtensions.ComputeSHA1Hash(System.String)">
            <summary>
            Computes the SHA1 hash.
            </summary>
            <param name="text">The text for witch to compute the hash.</param>
            <returns>The SHA1 hash.</returns>
        </member>
        <member name="M:Recognos.Core.StringExtensions.IsGuid(System.String)">
            <summary>
            Determines whether the specified expression is GUID.
            </summary>
            <param name="expression">The expression.</param>
            <returns>
            <c>true</c> if the specified expression is GUID; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Recognos.Core.StringExtensions.GzipCompress(System.String)">
            <summary>
            compress input string using GZip
            </summary>
            <param name="text">Text to compress</param>
            <returns>The compressed string</returns>
        </member>
        <member name="M:Recognos.Core.StringExtensions.GzipDecompress(System.String)">
            <summary>
            Decompress a GZip compressed string
            </summary>
            <param name="compressedText">Compressed text to decompress</param>
            <returns>The decompressed string</returns>
        </member>
        <member name="M:Recognos.Core.StringExtensions.Left(System.String,System.Int32)">
            <summary>
            Returns the left part of a string. 
            </summary>
            <param name="target">The target.</param>
            <param name="size">The size of the string to return.</param>
            <returns>String containing the left part of the original string</returns>
        </member>
        <member name="M:Recognos.Core.StringExtensions.Right(System.String,System.Int32)">
            <summary>
            Returns the right part of a string. 
            </summary>
            <param name="target">The target.</param>
            <param name="size">The size of the string to return.</param>
            <returns>String containing the right part of the original string</returns>
        </member>
        <member name="M:Recognos.Core.StringExtensions.RightAtWord(System.String,System.Int32,System.String)">
            <summary>
            Returns the right part of a string of a max <paramref name="length"/> truncating at word boundary.
            </summary>
            <param name="input">The input string.</param>
            <param name="length">The max length of the result.</param>
            <param name="prefix">The prefix to prepped to the result if the string has been truncated.</param>
            <returns>The truncated string.</returns>
        </member>
        <member name="M:Recognos.Core.StringExtensions.RightAtWord(System.String,System.Int32)">
            <summary>
            Returns the right part of a string of a max <paramref name="length"/> truncating at word boundary.
            </summary>
            <param name="input">The input string.</param>
            <param name="length">The max length of the result.</param>
            <returns>The truncated string.</returns>
        </member>
        <member name="M:Recognos.Core.StringExtensions.LeftAtWord(System.String,System.Int32,System.String)">
            <summary>
            Returns the left part of a string of a max <paramref name="length"/> truncating at word boundary.
            </summary>
            <param name="input">The input string.</param>
            <param name="length">The max length of the result.</param>
            <param name="suffix">The suffix to append to the result if the string has been truncated.</param>
            <returns>The truncated string.</returns>
        </member>
        <member name="M:Recognos.Core.StringExtensions.LeftAtWord(System.String,System.Int32)">
            <summary>
            Returns the left part of a string of a max <paramref name="length"/> truncating at word boundary.
            </summary>
            <param name="input">The input string.</param>
            <param name="length">The max length of the result.</param>
            <returns>The truncated string.</returns>
        </member>
        <member name="M:Recognos.Core.StringExtensions.LastWords(System.String,System.Int32)">
            <summary>
            Returns the last <paramref name="wordCount"/> words of a string.
            </summary>
            <param name="input">The input string.</param>
            <param name="wordCount">The the number of words to return.</param>
            <returns>String containing the words.</returns>
        </member>
        <member name="M:Recognos.Core.StringExtensions.FirstWords(System.String,System.Int32)">
            <summary>
            Returns the first <paramref name="wordCount"/> words of a string.
            </summary>
            <param name="input">The input string.</param>
            <param name="wordCount">The the number of words to return.</param>
            <returns>String containing the words.</returns>
        </member>
        <member name="M:Recognos.Core.StringExtensions.PreviousLines(System.String,System.Int32,System.Int32)">
            <summary>
            Returns the previous <paramref name="numberOfLines"/> lines of a string starting from <paramref name="position"/>.
            </summary>
            <param name="input">The input string.</param>
            <param name="position">The position to begin from.</param>
            <param name="numberOfLines">The the number of lines to return.</param>
            <returns>String containing the previous lines.</returns>
        </member>
        <member name="M:Recognos.Core.StringExtensions.NextLines(System.String,System.Int32,System.Int32)">
            <summary>
            Returns the next <paramref name="numberOfLines"/> lines of a string starting from <paramref name="position"/>.
            </summary>
            <param name="input">The input string.</param>
            <param name="position">The position to begin from.</param>
            <param name="numberOfLines">The the number of lines to return.</param>
            <returns>
            String containing the next lines.
            </returns>
        </member>
        <member name="M:Recognos.Core.StringExtensions.FirstLines(System.String,System.Int32)">
            <summary>
            Returns the first <paramref name="numberOfLines"/> lines of a string.
            </summary>
            <param name="input">The input string.</param>
            <param name="numberOfLines">The the number of lines to return.</param>
            <returns>
            String containing the first lines.
            </returns>
        </member>
        <member name="M:Recognos.Core.StringExtensions.LastLines(System.String,System.Int32)">
            <summary>
            Returns the last <paramref name="numberOfLines"/> lines of a string.
            </summary>
            <param name="input">The input string.</param>
            <param name="numberOfLines">The the number of lines to return.</param>
            <returns>
            String containing the last lines.
            </returns>
        </member>
        <member name="M:Recognos.Core.StringExtensions.SafeSubstring(System.String,System.Int32,System.Int32)">
            <summary>
            Safe implementation for substring. Is start and length are out of boundaries they are adjusted.
            </summary>
            <param name="input">The input.</param>
            <param name="start">The start.</param>
            <param name="length">The length.</param>
            <returns>The selected substring.</returns>
        </member>
        <member name="M:Recognos.Core.StringExtensions.Highlight(System.String,System.String,System.Collections.Generic.IEnumerable{Recognos.Core.Collections.Pair{System.Int32,System.Int32}})">
            <summary>
            Highlights the specified indexes in the input string using the specified format.
            </summary>
            <param name="input">The input.</param>
            <param name="format">The format.</param>
            <param name="indexes">The indexes.</param>
            <returns>The highlighted text.</returns>
        </member>
        <member name="M:Recognos.Core.StringExtensions.Highlight(System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Highlights the specified input.
            </summary>
            <param name="input">The input.</param>
            <param name="format">The format.</param>
            <param name="tags">The tags.</param>
            <returns>The highlighted string</returns>
        </member>
        <member name="M:Recognos.Core.StringExtensions.AllIndexesOf(System.String,System.String)">
            <summary>
            Returns all the indexes where the tag is found in the input string.
            </summary>
            <param name="input">The input string.</param>
            <param name="tag">The tag to search.</param>
            <returns>A collection of indexes.</returns>
        </member>
        <member name="M:Recognos.Core.StringExtensions.AllIndexesOf(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Returns all the indexes where the tags are found in the input string.
            </summary>
            <param name="input">The input string.</param>
            <param name="tags">The tags to search.</param>
            <returns>A collection of pairs of indexes and tags.</returns>
        </member>
        <member name="M:Recognos.Core.StringExtensions.Words(System.String)">
            <summary>
            Splits the input into words.
            </summary>
            <param name="input">The input.</param>
            <returns>Enumerable of words in the string.</returns>
        </member>
        <member name="M:Recognos.Core.StringExtensions.Levenshtein(System.String,System.String)">
            <summary>
            Computes the Levenshtein distance of two strings
            </summary>
            <param name="first">First string.</param>
            <param name="second">The second string.</param>
            <returns>The Levenshtein distance of the two strings</returns>
        </member>
        <member name="T:Recognos.Core.EnumUtilities`1">
            <summary>
            Helper class to manage operations on enums
            </summary>
            <remarks>
            This code was written by Damien Guard, 
            http://damieng.com/blog/2010/10/17/enums-better-syntax-improved-performance-and-tryparse-in-net-3-5
            Comments and stylecop fixes by Iulian Margarintescu
            </remarks>
            <typeparam name="T">Type of the enum on witch to operate</typeparam>
        </member>
        <member name="F:Recognos.Core.EnumUtilities`1.allValues">
            <summary>
            Collection of all the values of an enum.
            </summary>
        </member>
        <member name="F:Recognos.Core.EnumUtilities`1.insensitiveNames">
            <summary>
            The case insensitive names of the values.
            </summary>
        </member>
        <member name="F:Recognos.Core.EnumUtilities`1.sensitiveNames">
            <summary>
            The case sensitive names of the values.
            </summary>
        </member>
        <member name="F:Recognos.Core.EnumUtilities`1.values">
            <summary>
            The values of the enum as int.
            </summary>
        </member>
        <member name="F:Recognos.Core.EnumUtilities`1.names">
            <summary>
            The names of the enum as string. 
            </summary>
        </member>
        <member name="M:Recognos.Core.EnumUtilities`1.IsDefined(`0)">
            <summary>
            Determines whether the specified value is defined.
            </summary>
            <param name="value">The value.</param>
            <returns>
                <c>true</c> if the specified value is defined; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Recognos.Core.EnumUtilities`1.IsDefined(System.String)">
            <summary>
            Determines whether the specified value is defined.
            </summary>
            <param name="value">The value.</param>
            <returns>
            <c>true</c> if the specified value is defined; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Recognos.Core.EnumUtilities`1.IsDefined(System.Int32)">
            <summary>
            Determines whether the specified value is defined.
            </summary>
            <param name="value">The value.</param>
            <returns>
            <c>true</c> if the specified value is defined; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Recognos.Core.EnumUtilities`1.GetNames">
            <summary>
            Gets the names of the values of the enums.
            </summary>
            <returns>A collection of names.</returns>
        </member>
        <member name="M:Recognos.Core.EnumUtilities`1.GetName(`0)">
            <summary>
            Gets the name for a value.
            </summary>
            <param name="value">The value.</param>
            <returns>The name of the value</returns>
        </member>
        <member name="M:Recognos.Core.EnumUtilities`1.Parse(System.String)">
            <summary>
            Parses the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns>The value from the enum.</returns>
        </member>
        <member name="M:Recognos.Core.EnumUtilities`1.Parse(System.String,System.Boolean)">
            <summary>
            Parses the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="ignoreCase">if set to <c>true</c> ignore case.</param>
            <returns>The value of the enum.</returns>
        </member>
        <member name="M:Recognos.Core.EnumUtilities`1.TryParse(System.String,`0@)">
            <summary>
            Try to parse the <paramref name="value"/> as an enum value.
            </summary>
            <param name="value">The value.</param>
            <param name="returnValue">The return value.</param>
            <returns>True of the parsing was successful, false otherwise.</returns>
        </member>
        <member name="M:Recognos.Core.EnumUtilities`1.TryParse(System.String,System.Boolean,`0@)">
            <summary>
            Try to parse the <paramref name="value"/> as an enum value.
            </summary>
            <param name="value">The value.</param>
            <param name="ignoreCase">if set to <c>true</c> ignore case.</param>
            <param name="returnValue">The return value.</param>
            <returns>True of the parsing was successful, false otherwise.</returns>
        </member>
        <member name="M:Recognos.Core.EnumUtilities`1.ParseOrNull(System.String)">
            <summary>
            Parses the <paramref name="value"/> as an enum value.
            </summary>
            <param name="value">The value.</param>
            <returns>The parsed value or null if the value can't be parsed.</returns>
        </member>
        <member name="M:Recognos.Core.EnumUtilities`1.CastOrNull(System.Int32)">
            <summary>
            Casts the value to an enum value or null if the value can't be cast.
            </summary>
            <param name="value">The value.</param>
            <returns>The enum value or null if the value can't be cast.</returns>
        </member>
        <member name="M:Recognos.Core.EnumUtilities`1.DisplayName(`0)">
            <summary>
            Gets the value of the DisplayName attribute of the enum value.
            </summary>
            <param name="value">The value.</param>
            <returns>The value of the display name attribute or the enum value if no attribute specified.</returns>
        </member>
        <member name="M:Recognos.Core.EnumUtilities`1.FromDisplayName(System.String)">
            <summary>
            Returns the enum value corresponding to the specified display name.
            </summary>
            <param name="name">The name.</param>
            <returns>The enum value</returns>
        </member>
        <member name="P:Recognos.Core.EnumUtilities`1.Values">
            <summary>
            Gets all the values of the enum.
            </summary>
            <value>A collection of values.</value>
        </member>
        <member name="T:Recognos.Core.DataExtensions">
            <summary>
            various conversion extensions
            </summary>
        </member>
        <member name="M:Recognos.Core.DataExtensions.Compress(System.Byte[])">
            <summary>
            Compresses the specified data.
            </summary>
            <param name="data">The data to compress.</param>
            <returns>The compressed data.</returns>
        </member>
        <member name="M:Recognos.Core.DataExtensions.Decompress(System.Byte[])">
            <summary>
            Decompresses the specified data.
            </summary>
            <param name="data">The data to decompress.</param>
            <returns>The decompressed data.</returns>
        </member>
        <member name="M:Recognos.Core.DataExtensions.ToHexa(System.Byte[])">
            <summary>
            convert data into hexa decimal representation
            </summary>
            <param name="data">Data to convert</param>
            <returns>The hexadecimal representation of the data as a string</returns>
        </member>
        <member name="M:Recognos.Core.DataExtensions.NullSafe``1(``0[])">
            <summary>
            If the parametes is null return an empty array, otherwise return the array
            </summary>
            <typeparam name="T">Type of elements</typeparam>
            <param name="array">Array to check if null</param>
            <returns>The original array if not empty or an empty array if null</returns>
        </member>
        <member name="M:Recognos.Core.DataExtensions.NullSafe``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Extension method that enables iteration on a null collection.
            </summary>
            <typeparam name="T">Type of elements in the collection</typeparam>
            <param name="enumerable">The enumerable collection that can be null.</param>
            <returns>A safe IEnumerable<typeparamref name="T"/></returns>
        </member>
        <member name="M:Recognos.Core.DataExtensions.ToEnum``1(System.Int32)">
            <summary>
            Convert from the integer value to an enumeration value
            </summary>
            <typeparam name="T">Type of the enumeration.</typeparam>
            <param name="value">The value to convert.</param>
            <returns>The enumeration value.</returns>
        </member>
        <member name="M:Recognos.Core.DataExtensions.ToFileSize(System.Int32)">
            <summary>
            Converts the value of <paramref name="size"/> to human readable file size
            </summary>
            <param name="size">The size to convert.</param>
            <returns>Human readable file size.</returns>
        </member>
        <member name="M:Recognos.Core.DataExtensions.ToFileSize(System.Int64)">
            <summary>
            Converts the value of <paramref name="size"/> to human readable file size
            </summary>
            <param name="size">The size to convert.</param>
            <returns>Human readable file size.</returns>
        </member>
        <member name="T:Recognos.Core.Collections.IQueue`1">
            <summary>
            Interface for a queue.
            </summary>
            <typeparam name="T">Type of items in the queue.</typeparam>
        </member>
        <member name="M:Recognos.Core.Collections.IQueue`1.Enqueue(`0)">
            <summary>
            Enqueues the specified item.
            </summary>
            <param name="item">The item to enqueue.</param>
        </member>
        <member name="M:Recognos.Core.Collections.IQueue`1.Dequeue(`0@)">
            <summary>
            Dequeues the specified item.
            </summary>
            <param name="item">The item dequeued.</param>
            <returns>True if an item exists and has been dequeued.</returns>
        </member>
        <member name="T:Recognos.Core.Modeling.Entity`1">
            <summary>
            Base class for Entity objects.
            The ID is a Guid generated with GuidCombIdGenerator
            </summary>
            <typeparam name="T">Type of the entity</typeparam>
        </member>
        <member name="T:Recognos.Core.Modeling.Entity`3">
            <summary>
            Base class for Entity objects.
            </summary>
            <typeparam name="T">Concrete type of the object.</typeparam>
            <typeparam name="TId">The type of the entity identifier.</typeparam>
            <typeparam name="TIdGenerator">The type of the id generator.</typeparam>
        </member>
        <member name="F:Recognos.Core.Modeling.Entity`3.idGenerator">
            <summary>
            The id generator for this type of entity.
            </summary>
        </member>
        <member name="M:Recognos.Core.Modeling.Entity`3.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Recognos.Core.Modeling.Entity`3"/> class.
            </summary>
        </member>
        <member name="M:Recognos.Core.Modeling.Entity`3.#ctor(`1)">
            <summary>
            Initializes a new instance of the <see cref="T:Recognos.Core.Modeling.Entity`3"/> class.
            </summary>
            <param name="id">The id of the entity.</param>
        </member>
        <member name="M:Recognos.Core.Modeling.Entity`3.op_Inequality(Recognos.Core.Modeling.Entity{`0,`1,`2},Recognos.Core.Modeling.Entity{`0,`1,`2})">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="first">The first.</param>
            <param name="second">The second.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Recognos.Core.Modeling.Entity`3.op_Equality(Recognos.Core.Modeling.Entity{`0,`1,`2},Recognos.Core.Modeling.Entity{`0,`1,`2})">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="first">The first.</param>
            <param name="second">The second.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Recognos.Core.Modeling.Entity`3.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Recognos.Core.Modeling.Entity`3.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Recognos.Core.Modeling.Entity`3.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Recognos.Core.Modeling.Entity`3.Equals(Recognos.Core.Modeling.Entity{`0,`1,`2})">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:Recognos.Core.Modeling.Entity`3.Equals(`0)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:Recognos.Core.Modeling.Entity`3.EqualOperator(Recognos.Core.Modeling.Entity{`0,`1,`2},Recognos.Core.Modeling.Entity{`0,`1,`2})">
            <summary>
            Helper function for implementing overloaded equality operator.
            </summary>
            <param name="left">Left-hand side object.</param>
            <param name="right">Right-hand side object.</param>
            <returns>True if the objects are equal, false otherwise.</returns>
        </member>
        <member name="M:Recognos.Core.Modeling.Entity`3.NotEqualOperator(Recognos.Core.Modeling.Entity{`0,`1,`2},Recognos.Core.Modeling.Entity{`0,`1,`2})">
            <summary>
            Helper function for implementing overloaded inequality operator.
            </summary>
            <param name="left">Left-hand side object.</param>
            <param name="right">Right-hand side object.</param>
            <returns>True if the objects are NOT equal, false otherwise.</returns>
        </member>
        <member name="P:Recognos.Core.Modeling.Entity`3.Id">
            <summary>
            Gets the unique identifier of the entity.
            </summary>
            <value>The id of this entity.</value>
        </member>
        <member name="T:Recognos.Core.IOC.IContainerLocator">
            <summary>
            Interface for a container locator.
            </summary>
        </member>
        <member name="P:Recognos.Core.IOC.IContainerLocator.Builder">
            <summary>
            Gets the object builder.
            </summary>
            <value>The object builder.</value>
        </member>
        <member name="T:Recognos.Core.FunctionalExtensions">
            <summary>
            Helper extension methods for expressing functional algorithms
            </summary>
        </member>
        <member name="M:Recognos.Core.FunctionalExtensions.Times(System.Int32,System.Action)">
            <summary>
            Execute action <paramref name="numberOfTimes"/> times
            </summary>
            <param name="numberOfTimes">Number of times to execute action</param>
            <param name="action">Action to execute</param>
        </member>
        <member name="M:Recognos.Core.FunctionalExtensions.Times(System.Int32,System.Action{System.Int32})">
            <summary>
            Execute action <paramref name="numberOfTimes"/> times
            </summary>
            <param name="numberOfTimes">Number of times to execute action</param>
            <param name="action">Action to execute</param>
        </member>
        <member name="M:Recognos.Core.FunctionalExtensions.Retries(System.Int32,System.Func{System.Boolean},System.Action{System.Int32},System.Action{System.Int32},System.Action,System.Action)">
            <summary>
            Tries to execute <paramref name="action"/> <paramref name="maxRetries"/> number of times
            </summary>
            <param name="maxRetries">Number of times to try to execute the action</param>
            <param name="action">Action to try to execute</param>
            <param name="delayAction">Action that delayes the execution. Will probably call Thread.Sleep(). Will be called
            with the current try number as argument</param>
            <param name="failedTryAction">Action to execute after each failed try. 
            Will be called with the current try number as argument</param>
            <param name="successAction">Action to execute if the <paramref name="action"/> has completed successfully</param>
            <param name="failedAction">Action to execute if the <paramref name="action"/> has not completed successfully</param>
            <returns>True if the action has eventualy executed successfuly, false otherwise.</returns>
        </member>
        <member name="T:Recognos.Core.Collections.LockFreeQueue`1">
            <summary>
            Lock free queue implementation
            </summary>
            <typeparam name="T">The type of elements to store in the queue</typeparam>
        </member>
        <member name="F:Recognos.Core.Collections.LockFreeQueue`1.head">
            <summary>
            Head of the list
            </summary>
        </member>
        <member name="F:Recognos.Core.Collections.LockFreeQueue`1.tail">
            <summary>
            Tail of the list
            </summary>
        </member>
        <member name="M:Recognos.Core.Collections.LockFreeQueue`1.#ctor">
            <summary>
            Initializes a new instance of the LockFreeQueue class.
            </summary>
        </member>
        <member name="M:Recognos.Core.Collections.LockFreeQueue`1.Enqueue(`0)">
            <summary>
            Enqueue an item
            </summary>
            <param name="item">Item to enqueue</param>
        </member>
        <member name="M:Recognos.Core.Collections.LockFreeQueue`1.Dequeue(`0@)">
            <summary>
            Dequeue an item
            </summary>
            <param name="item">Item to Dequeue</param>
            <returns>true if the operation has succeded, false otherwise</returns>
        </member>
        <member name="M:Recognos.Core.Collections.LockFreeQueue`1.CompareAndSwap``1(``0@,``0,``0)">
            <summary>
            Method performing compare an switch
            </summary>
            <typeparam name="TSwap">Type of the elements</typeparam>
            <param name="location">location of the element</param>
            <param name="comparand">the element to compare with</param>
            <param name="newValue">the new valis</param>
            <returns>the result of the CAS operation</returns>
        </member>
        <member name="T:Recognos.Core.Collections.LockFreeQueue`1.SingleLinkNode">
            <summary>
            Internal list node
            </summary>
        </member>
        <member name="F:Recognos.Core.Collections.LockFreeQueue`1.SingleLinkNode.Next">
            <summary>
            Next node of the list
            </summary>
            <remarks>
             Note; the Next member cannot be a property since it participates in many CAS operations
            </remarks>
        </member>
        <member name="F:Recognos.Core.Collections.LockFreeQueue`1.SingleLinkNode.Item">
            <summary>
            Item stored in this node
            </summary>
        </member>
        <member name="T:Recognos.Core.Threading.ThreadingExtensions">
            <summary>
            Various extension methods related to parallel processing
            </summary>
        </member>
        <member name="M:Recognos.Core.Threading.ThreadingExtensions.ParallelForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Execute parallel tasks for each item in a collection
            </summary>
            <typeparam name="T">Type of items in the collection</typeparam>
            <param name="collection">Collection of items</param>
            <param name="action">Action to execute</param>
        </member>
        <member name="M:Recognos.Core.Threading.ThreadingExtensions.ParallelForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0},System.Int32)">
            <summary>
            Execute parallel tasks for each item in a collection
            </summary>
            <typeparam name="T">Type of items in the collection</typeparam>
            <param name="collection">Collection of items</param>
            <param name="action">Action to execute</param>
            <param name="workerCount">Number of workers to use</param>
        </member>
        <member name="M:Recognos.Core.Threading.ThreadingExtensions.ParallelForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0},System.Func{``0,System.Exception,System.Boolean},System.Action{System.Int32},System.Int32,System.Int32)">
            <summary>
            Executes an action for each item in a collection. Actions are executed asyncron.
            </summary>
            <typeparam name="T">Type of elements in the collection.</typeparam>
            <param name="collection">The collection.</param>
            <param name="action">The action.</param>
            <param name="errorHandler">The error handler. </param>
            <param name="progress">The progress.</param>
            <param name="workerCount">The worker count.</param>
            <param name="retryCount">The retry count.</param>
            <returns>Number of successfuly executed actions.</returns>
        </member>
        <member name="M:Recognos.Core.Threading.ThreadingExtensions.ParallelTimes(System.Int32,System.Action,System.Int32)">
            <summary>
            Run <paramref name="action"/> <paramref name="numberOfTimes"/> using <paramref name="workerCount"/>
            parallel threads
            </summary>
            <param name="numberOfTimes">Times to execute the action</param>
            <param name="action">Action to execute</param>
            <param name="workerCount">Number of threads to use to use</param>
        </member>
        <member name="T:Recognos.Core.IOC.FunctionalObjectRegistry">
            <summary>
            Helper class to map an existing DI container to the required interfaces.
            </summary>
        </member>
        <member name="F:Recognos.Core.IOC.FunctionalObjectRegistry.registratar">
            <summary>
            Member holding the functor used to register types in the container
            </summary>
        </member>
        <member name="F:Recognos.Core.IOC.FunctionalObjectRegistry.singletonRegistratar">
            <summary>
            Member holding the functor used to register singleton types in the container
            </summary>
        </member>
        <member name="M:Recognos.Core.IOC.FunctionalObjectRegistry.#ctor(System.Action{System.Type},System.Action{System.Type,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Recognos.Core.IOC.FunctionalObjectRegistry"/> class.
            </summary>
            <param name="registrar">The object registrar.</param>
            <param name="singletonRegistrar">The singleton registrar.</param>
        </member>
        <member name="M:Recognos.Core.IOC.FunctionalObjectRegistry.RegisterSingleton``1(``0)">
            <summary>
            Registers the given instance as the singleton that will be returned for the given type.
            </summary>
            <typeparam name="T">Type of the instance to register.</typeparam>
            <param name="instance">The instance.</param>
        </member>
        <member name="M:Recognos.Core.IOC.FunctionalObjectRegistry.RegisterType``1">
            <summary>
            Registers the given type in the container.
            </summary>
            <typeparam name="T">Type to register.</typeparam>
        </member>
        <member name="M:Recognos.Core.IOC.FunctionalObjectRegistry.RegisterSingleton(System.Type,System.Object)">
            <summary>
            Registers the given instance as the singleton that will be returned for the given type.
            </summary>
            <param name="type">The type to register.</param>
            <param name="instance">The instance.</param>
        </member>
        <member name="M:Recognos.Core.IOC.FunctionalObjectRegistry.RegisterType(System.Type)">
            <summary>
            Registers the given type in the container.
            </summary>
            <param name="type">The type to register.</param>
        </member>
        <member name="T:Recognos.Core.Caching.FakeCache">
            <summary>
            A cache implementation that does not cache elements
            <remarks>Use for testing purposes</remarks>
            </summary>
        </member>
        <member name="M:Recognos.Core.Caching.FakeCache.Cached``1(System.String,System.Func{``0},Recognos.Core.Caching.IExpirationPolicyProvider)">
            <summary>
            Execute the getter and return the result
            </summary>
            <typeparam name="T">Type of the result</typeparam>
            <param name="key">Key of the object (UNUSED)</param>
            <param name="getter">Getter to execute to retrive the object</param>
            <param name="policyProvider">Policy Provider (UNUSED)</param>
            <returns>The result of the getter invocation</returns>
        </member>
        <member name="M:Recognos.Core.Caching.FakeCache.Cached``1(System.String,System.Func{``0},Recognos.Core.Caching.CachePriority)">
            <summary>
            Execute the getter and return the result
            </summary>
            <typeparam name="T">Type of the result</typeparam>
            <param name="key">Key of the object (UNUSED)</param>
            <param name="getter">Getter to execute to retrive the object</param>
            <param name="priority">Priority (UNUSED)</param>
            <returns>The result of the getter invocation</returns>
        </member>
        <member name="M:Recognos.Core.Caching.FakeCache.Cached``1(System.String,System.Func{``0},System.TimeSpan)">
            <summary>
            Execute the getter and return the result
            </summary>
            <typeparam name="T">Type of the result</typeparam>
            <param name="key">Key of the object (UNUSED)</param>
            <param name="getter">Getter to execute to retrive the object</param>
            <param name="slidingExpiration">Sliding expiration time (UNUSED)</param>
            <returns>The result of the getter invocation</returns>
        </member>
        <member name="M:Recognos.Core.Caching.FakeCache.Cached``1(System.String,System.Func{``0})">
            <summary>
            Execute the getter and return the result
            </summary>
            <typeparam name="T">Type of the result</typeparam>
            <param name="key">Key of the object (UNUSED)</param>
            <param name="getter">Getter to execute to retrive the object</param>
            <returns>The result of the getter invocation</returns>
        </member>
        <member name="M:Recognos.Core.Caching.FakeCache.Contains(System.String)">
            <summary>
            Verify if the key exists in the cache.
            </summary>
            <param name="key">Key of the object</param>
            <returns>Always returns false</returns>
        </member>
        <member name="P:Recognos.Core.Caching.FakeCache.SupportsCacheDependency">
            <summary>
            Gets a value indicating whether the instance supports cache dependencies. Always false.
            </summary>
        </member>
        <member name="T:Recognos.Core.Modeling.ValueObject`1">
            <summary>
            Base class for Value Objects.
            </summary>
            <typeparam name="T">Concrete type of the object.</typeparam>
        </member>
        <member name="M:Recognos.Core.Modeling.ValueObject`1.op_Inequality(Recognos.Core.Modeling.ValueObject{`0},Recognos.Core.Modeling.ValueObject{`0})">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="first">The first.</param>
            <param name="second">The second.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Recognos.Core.Modeling.ValueObject`1.op_Equality(Recognos.Core.Modeling.ValueObject{`0},Recognos.Core.Modeling.ValueObject{`0})">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="first">The first.</param>
            <param name="second">The second.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Recognos.Core.Modeling.ValueObject`1.Equals(System.Object)">
            <summary>
            Compares two Value Objects according to atomic values returned by <see cref="M:Recognos.Core.Modeling.ValueObject`1.GetAtomicValues"/>.
            </summary>
            <param name="obj">Object to compare to.</param>
            <returns>True if objects are considered equal.</returns>
        </member>
        <member name="M:Recognos.Core.Modeling.ValueObject`1.GetHashCode">
            <summary>
            Returns hashcode value calculated according to a collection of atomic values
            returned by <see cref="M:Recognos.Core.Modeling.ValueObject`1.GetAtomicValues"/>.
            </summary>
            <returns>Hashcode value.</returns>
        </member>
        <member name="M:Recognos.Core.Modeling.ValueObject`1.Equals(Recognos.Core.Modeling.ValueObject{`0})">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:Recognos.Core.Modeling.ValueObject`1.Equals(`0)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:Recognos.Core.Modeling.ValueObject`1.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Recognos.Core.Modeling.ValueObject`1.EqualOperator(Recognos.Core.Modeling.ValueObject{`0},Recognos.Core.Modeling.ValueObject{`0})">
            <summary>
            Helper function for implementing overloaded equality operator.
            </summary>
            <param name="left">Left-hand side object.</param>
            <param name="right">Right-hand side object.</param>
            <returns>True if the objects are equal, false otherwise.</returns>
        </member>
        <member name="M:Recognos.Core.Modeling.ValueObject`1.EqualOperator(`0,`0)">
            <summary>
            Helper function for implementing overloaded equality operator.
            </summary>
            <param name="left">Left-hand side object.</param>
            <param name="right">Right-hand side object.</param>
            <returns>True if the objects are equal, false otherwise.</returns>
        </member>
        <member name="M:Recognos.Core.Modeling.ValueObject`1.NotEqualOperator(Recognos.Core.Modeling.ValueObject{`0},Recognos.Core.Modeling.ValueObject{`0})">
            <summary>
            Helper function for implementing overloaded inequality operator.
            </summary>
            <param name="left">Left-hand side object.</param>
            <param name="right">Right-hand side object.</param>
            <returns>True if the objects are NOT equal, false otherwise.</returns>
        </member>
        <member name="M:Recognos.Core.Modeling.ValueObject`1.NotEqualOperator(`0,`0)">
            <summary>
            Helper function for implementing overloaded inequality operator.
            </summary>
            <param name="left">Left-hand side object.</param>
            <param name="right">Right-hand side object.</param>
            <returns>True if the objects are NOT equal, false otherwise.</returns>
        </member>
        <member name="M:Recognos.Core.Modeling.ValueObject`1.GetAtomicValues">
            <summary>
            To be overridden in inheriting clesses for providing a collection of atomic values of
            this Value Object.
            </summary>
            <returns>Collection of atomic values.</returns>
        </member>
        <member name="T:Recognos.Core.Empty">
            <summary>
            Helper class to generate empty entities.
            </summary>
        </member>
        <member name="M:Recognos.Core.Empty.Enumerable``1">
            <summary>
            Returns an empty IEnumerable.
            </summary>
            <typeparam name="T">Type of the items in the enumerable</typeparam>
            <returns>Empty IEnumerable</returns>
        </member>
        <member name="M:Recognos.Core.Empty.Array``1">
            <summary>
            Returns an empty array.
            </summary>
            <typeparam name="T">Type of the items in the array</typeparam>
            <returns>Empty array.</returns>
        </member>
        <member name="T:Recognos.Core.Collections.IDataFilters">
            <summary>
            Interface for expression filters for a collection of records
            </summary>
        </member>
        <member name="M:Recognos.Core.Collections.IDataFilters.Clone">
            <summary>
            Clone filters object. Useful for creating filters for next/prev page 
            </summary>
            <returns>The cloneed object</returns>
        </member>
        <member name="P:Recognos.Core.Collections.IDataFilters.Pagination">
            <summary>
            Gets or sets the current pagination
            </summary>
        </member>
        <member name="T:Recognos.Core.Threading.FunctionalTask">
            <summary>
            Helper class to express a task with lambas or delegates
            </summary>
        </member>
        <member name="T:Recognos.Core.Threading.ITask">
            <summary>
            A task that can be run on a separate thread
            </summary>
        </member>
        <member name="M:Recognos.Core.Threading.ITask.Execute">
            <summary>
            Method called to do the work for the task. This method should not throw any exceptions.
            </summary>
        </member>
        <member name="M:Recognos.Core.Threading.FunctionalTask.#ctor">
            <summary>
            Initializes a new instance of the FunctionalTask class.
            </summary>
        </member>
        <member name="M:Recognos.Core.Threading.FunctionalTask.#ctor(System.Action)">
            <summary>
            Initializes a new instance of the FunctionalTask class.
            </summary>
            <param name="action">Action to execute</param>
        </member>
        <member name="M:Recognos.Core.Threading.FunctionalTask.Execute">
            <summary>
            Run the specified task
            </summary>
        </member>
        <member name="P:Recognos.Core.Threading.FunctionalTask.Action">
            <summary>
            Gets or sets the action to be executed
            </summary>
        </member>
        <member name="T:Recognos.Core.Modeling.GuidCombIdGenerator">
            <summary>
            An <see cref="T:Recognos.Core.Modeling.IdGenerator`1"/> that generates <see cref="T:System.Guid"/> values 
            using a strategy suggested Jimmy Nilsson's 
            <a href="http://www.informit.com/articles/article.asp?p=25862">article</a>
            on <a href="http://www.informit.com">informit.com</a>. 
            </summary>
            <remarks>
            <p>
            This id generation strategy is specified in the mapping file as 
            <code>&lt;generator class="guid.comb" /&gt;</code>
            </p>
            <p>
            The <c>comb</c> algorithm is designed to make the use of GUIDs as Primary Keys, Foreign Keys, 
            and Indexes nearly as efficient as ints.
            </p>
            <p>
            This code was contributed by Donald Mull.
            </p>
            <p>Code taken from NHibernate</p>
            </remarks>
        </member>
        <member name="T:Recognos.Core.Modeling.IdGenerator`1">
            <summary>
            Interface for an id generator.
            </summary>
            <typeparam name="T">Type of the generated ids</typeparam>
        </member>
        <member name="M:Recognos.Core.Modeling.IdGenerator`1.GenerateId">
            <summary>
            Generates a new id.
            </summary>
            <returns>The new id.</returns>
        </member>
        <member name="M:Recognos.Core.Modeling.GuidCombIdGenerator.GenerateId">
            <summary>
            Generates a new id.
            </summary>
            <returns>The new id.</returns>
        </member>
        <member name="T:Recognos.Core.IOC.ContainerLocator">
            <summary>
            Helper class to locate the DI container.
            </summary>
            <remarks>
            If possible use Autofac
            </remarks>
        </member>
        <member name="F:Recognos.Core.IOC.ContainerLocator.builder">
            <summary>
            Reference to the DI container.
            </summary>
        </member>
        <member name="F:Recognos.Core.IOC.ContainerLocator.padlock">
            <summary>
            internal object used to ensure thread safety
            </summary>
        </member>
        <member name="F:Recognos.Core.IOC.ContainerLocator.instance">
            <summary>
            Instance of the locator.
            </summary>
        </member>
        <member name="M:Recognos.Core.IOC.ContainerLocator.#ctor(Recognos.Core.IOC.IObjectBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:Recognos.Core.IOC.ContainerLocator"/> class.
            </summary>
            <param name="builder">The builder.</param>
        </member>
        <member name="M:Recognos.Core.IOC.ContainerLocator.CreateInstance">
            <summary>
            Try to create an instance of a valid locator.
            </summary>
            <returns>A initialized locator.</returns>
        </member>
        <member name="M:Recognos.Core.IOC.ContainerLocator.TryRunBootstrapper(System.Type)">
            <summary>
            Tries the run a bootstrapper type.
            </summary>
            <param name="type">The bootstrapper type.</param>
        </member>
        <member name="P:Recognos.Core.IOC.ContainerLocator.ContainerProvider">
            <summary>
            Gets or sets the container provider.
            </summary>
            <value>The container provider.</value>
        </member>
        <member name="P:Recognos.Core.IOC.ContainerLocator.Locator">
            <summary>
            Gets the instance.
            </summary>
            <value>The instance.</value>
        </member>
        <member name="P:Recognos.Core.IOC.ContainerLocator.Builder">
            <summary>
            Gets the object builder.
            </summary>
            <value>The object builder.</value>
        </member>
        <member name="T:Recognos.Core.Collections.LockingQueue`1">
            <summary>
            Implementation of a thread safe queue witch uses locking.
            </summary>
            <typeparam name="T">Type of the items in the queue</typeparam>
        </member>
        <member name="F:Recognos.Core.Collections.LockingQueue`1.queue">
            <summary>
            Queue used internaly
            </summary>
        </member>
        <member name="M:Recognos.Core.Collections.LockingQueue`1.Enqueue(`0)">
            <summary>
            Enqueues the specified item.
            </summary>
            <param name="item">The item to enqueue.</param>
        </member>
        <member name="M:Recognos.Core.Collections.LockingQueue`1.Dequeue(`0@)">
            <summary>
            Dequeues the specified item.
            </summary>
            <param name="item">The item dequeued.</param>
            <returns>
            True if an item exists and has been dequeued.
            </returns>
        </member>
        <member name="T:Recognos.Core.Collections.CollectionsExtensions">
            <summary>
            extension methods related to collections
            </summary>
        </member>
        <member name="M:Recognos.Core.Collections.CollectionsExtensions.ApplyPagination``1(System.Linq.IQueryable{``0},Recognos.Core.Collections.IPagination)">
            <summary>
            return a query that represents a page from the original query based on the pagination object provided
            </summary>
            <typeparam name="T">type of data</typeparam>
            <param name="query">query to paginate</param>
            <param name="pagination">object describing the pagination</param>
            <returns>query for the selected page</returns>
        </member>
        <member name="M:Recognos.Core.Collections.CollectionsExtensions.Paginate``1(System.Linq.IQueryable{``0},Recognos.Core.Collections.IPagination)">
            <summary>
            paginate a query
            </summary>
            <typeparam name="T">type of the data</typeparam>
            <param name="query">query to paginate</param>
            <param name="pagination">pagination object</param>
            <returns>data for the page</returns>
        </member>
        <member name="M:Recognos.Core.Collections.CollectionsExtensions.Paginate``1(System.Linq.IQueryable{``0},System.Int32,System.Int32)">
            <summary>
            paginate a generic query
            </summary>
            <typeparam name="T">type of data</typeparam>
            <param name="query">query to paginate</param>
            <param name="pageIndex">page to display</param>
            <param name="recordsPerPage">number of records per page</param>
            <returns>the data for the requested page</returns>
        </member>
        <member name="M:Recognos.Core.Collections.CollectionsExtensions.SelectPage``1(System.Linq.IQueryable{``0},System.Int32,System.Int32)">
            <summary>
            Selects a page from a query. <paramref name="criteriaPage"/> must be in [1-LastPage].
            </summary>
            <typeparam name="T">Type of the objects in the query.</typeparam>
            <param name="query">The query.</param>
            <param name="pageSize">Size of the page.</param>
            <param name="criteriaPage">The criteria page. The first page has the index 1.</param>
            <returns>The page of data.</returns>
        </member>
        <member name="M:Recognos.Core.Collections.CollectionsExtensions.Navigate``1(System.Linq.IQueryable{``0},System.Int32)">
            <summary>
            create a navigator on a query
            </summary>
            <typeparam name="T">type of the data</typeparam>
            <param name="query">query to navigate</param>
            <param name="recordsPerPage">number of records per page</param>
            <returns>a paged data navigator</returns>
        </member>
        <member name="M:Recognos.Core.Collections.CollectionsExtensions.Navigate``1(System.Linq.IQueryable{``0},Recognos.Core.Collections.IPagination)">
            <summary>
            create a navigator on a query
            </summary>
            <typeparam name="T">type of the data</typeparam>
            <param name="query">query to navigate</param>
            <param name="pagination">pagination object</param>
            <returns>a paged data navigator</returns>
        </member>
        <member name="M:Recognos.Core.Collections.CollectionsExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Execute an action for every item in the collection
            </summary>
            <typeparam name="T">Type of items in the collection</typeparam>
            <param name="collection">Collection of items</param>
            <param name="action">Action to execute on each item</param>
        </member>
        <member name="M:Recognos.Core.Collections.CollectionsExtensions.ForEach``1(``0[],System.Action{``0})">
            <summary>
            Execute an action for every item in the array
            </summary>
            <typeparam name="T">Type of items in the array</typeparam>
            <param name="array">Array of items</param>
            <param name="action">Action to execute on each item</param>
        </member>
        <member name="M:Recognos.Core.Collections.CollectionsExtensions.Synchronize``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.ICollection{``0},System.Func{``0,``0,System.Boolean},System.Action{``0,``0})">
            <summary>
            Sincronizes the specified source to the target collection.
            The target collection is not modified.
            The <paramref name="equivalenceFunction"/> is used to see if two elements are the same.
            Elements that are in the <paramref name="source"/> and have no equivalent in the <paramref name="target"/> are removed from source.
            Elements that are in the <paramref name="target"/> and have no equivalent in the <paramref name="source"/> are added to the source.
            Elements that are in the <paramref name="source"/> and have equivalent element in the <paramref name="target"/> are 
            updated using the <paramref name="elementSynchronizer"/>.
            </summary>
            <typeparam name="T">Type of the elements in the collections</typeparam>
            <param name="source">The source.</param>
            <param name="target">The target.</param>
            <param name="equivalenceFunction">The equivalence function.</param>
            <param name="elementSynchronizer">The element synchronizer.</param>
        </member>
        <member name="M:Recognos.Core.Collections.CollectionsExtensions.AddRange``1(System.Collections.Generic.ISet{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds the range of items to the set.
            </summary>
            <typeparam name="T">Type of the elements.</typeparam>
            <param name="set">The target set.</param>
            <param name="range">The range to add.</param>
        </member>
        <member name="T:Recognos.Core.Caching.ExpirationPolicy">
            <summary>
            Class encapsulating details about how much to keep an object in the cache
            </summary>
        </member>
        <member name="F:Recognos.Core.Caching.ExpirationPolicy.NoAbsoluteExpiration">
            <summary>
            Constant that represents no absolute expiration
            </summary>
        </member>
        <member name="F:Recognos.Core.Caching.ExpirationPolicy.NoSlidingExpiration">
            <summary>
            Constant that represents no sliding expiration
            </summary>
        </member>
        <member name="M:Recognos.Core.Caching.ExpirationPolicy.#ctor">
            <summary>
            Initializes a new instance of the ExpirationPolicy class
            </summary>
        </member>
        <member name="P:Recognos.Core.Caching.ExpirationPolicy.HasAbsolute">
            <summary>
            Gets a value indicating whether the absolute expiration is specified
            </summary>
        </member>
        <member name="P:Recognos.Core.Caching.ExpirationPolicy.HasSliding">
            <summary>
            Gets a value indicating whether the sliding expiration is specified
            </summary>
        </member>
        <member name="P:Recognos.Core.Caching.ExpirationPolicy.AbsoluteExpirationTime">
            <summary>
            Gets or sets the date for absolute expiration
            </summary>
        </member>
        <member name="P:Recognos.Core.Caching.ExpirationPolicy.SlidingExpirationTime">
            <summary>
            Gets or sets the timespan for sliding expiration
            </summary>
        </member>
        <member name="P:Recognos.Core.Caching.ExpirationPolicy.Priority">
            <summary>
            Gets or sets the item priority
            </summary>
        </member>
        <member name="P:Recognos.Core.Caching.ExpirationPolicy.DependencyProvider">
            <summary>
            Gets or sets the command porvider
            </summary>
        </member>
        <member name="T:Recognos.Core.Threading.ResetEvent">
            <summary>
            A wait handle like struct witch combines an AutoResetEvent and a ManualResetEvent
            </summary>
        </member>
        <member name="F:Recognos.Core.Threading.ResetEvent.handles">
            <summary>
            Array of handles to wait on.
            </summary>
        </member>
        <member name="F:Recognos.Core.Threading.ResetEvent.autoEvent">
            <summary>
            The auto event.
            </summary>
        </member>
        <member name="F:Recognos.Core.Threading.ResetEvent.manualEvent">
            <summary>
            The manual event.
            </summary>
        </member>
        <member name="F:Recognos.Core.Threading.ResetEvent.disposed">
            <summary>
            Flag indicating that the current instance has been disposed.
            </summary>
        </member>
        <member name="M:Recognos.Core.Threading.ResetEvent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Recognos.Core.Threading.ResetEvent"/> class.
            </summary>
        </member>
        <member name="M:Recognos.Core.Threading.ResetEvent.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Recognos.Core.Threading.ResetEvent"/> class.
            </summary>
            <param name="initialState">The initial state of the event.</param>
        </member>
        <member name="M:Recognos.Core.Threading.ResetEvent.Wait">
            <summary>
            Waits for a signal
            </summary>
        </member>
        <member name="M:Recognos.Core.Threading.ResetEvent.WakeOne">
            <summary>
            Wake one waiting thread
            </summary>
        </member>
        <member name="M:Recognos.Core.Threading.ResetEvent.WakeAll">
            <summary>
            Wake all waiting threads. This method does not reset the event. The <see cref="M:Recognos.Core.Threading.ResetEvent.Reset"/> method must be called
            to reset the event.
            </summary>
        </member>
        <member name="M:Recognos.Core.Threading.ResetEvent.Reset">
            <summary>
            Reset the event to the non-signaled state
            </summary>
        </member>
        <member name="M:Recognos.Core.Threading.ResetEvent.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Recognos.Core.Threading.Locks">
            <summary>
            Helper class to manage ReaderWriterLockSlim locks.
            </summary>
        </member>
        <member name="M:Recognos.Core.Threading.Locks.GetReadLock(System.Threading.ReaderWriterLockSlim)">
            <summary>
            Gets the read lock.
            </summary>
            <param name="locks">The locks.</param>
        </member>
        <member name="M:Recognos.Core.Threading.Locks.GetReadOnlyLock(System.Threading.ReaderWriterLockSlim)">
            <summary>
            Gets the read only lock.
            </summary>
            <param name="locks">The locks.</param>
        </member>
        <member name="M:Recognos.Core.Threading.Locks.GetWriteLock(System.Threading.ReaderWriterLockSlim)">
            <summary>
            Gets the write lock.
            </summary>
            <param name="locks">The locks.</param>
        </member>
        <member name="M:Recognos.Core.Threading.Locks.ReleaseReadOnlyLock(System.Threading.ReaderWriterLockSlim)">
            <summary>
            Releases the read only lock.
            </summary>
            <param name="locks">The locks.</param>
        </member>
        <member name="M:Recognos.Core.Threading.Locks.ReleaseReadLock(System.Threading.ReaderWriterLockSlim)">
            <summary>
            Releases the read lock.
            </summary>
            <param name="locks">The locks.</param>
        </member>
        <member name="M:Recognos.Core.Threading.Locks.ReleaseWriteLock(System.Threading.ReaderWriterLockSlim)">
            <summary>
            Releases the write lock.
            </summary>
            <param name="locks">The locks.</param>
        </member>
        <member name="M:Recognos.Core.Threading.Locks.ReleaseLock(System.Threading.ReaderWriterLockSlim)">
            <summary>
            Releases the lock.
            </summary>
            <param name="locks">The locks.</param>
        </member>
        <member name="M:Recognos.Core.Threading.Locks.GetLockInstance">
            <summary>
            Gets the lock instance.
            </summary>
            <returns>The lock instance</returns>
        </member>
        <member name="M:Recognos.Core.Threading.Locks.GetLockInstance(System.Threading.LockRecursionPolicy)">
            <summary>
            Gets the lock instance.
            </summary>
            <param name="recursionPolicy">The recursion policy.</param>
            <returns>The lock instance</returns>
        </member>
        <member name="T:Recognos.Core.SimpleScheduler">
            <summary>
            Simple scheduler class
            </summary>
        </member>
        <member name="F:Recognos.Core.SimpleScheduler.DisablingValues">
            <summary>
            Array of values that can be passed as timeToRun to disable the timer
            </summary>
        </member>
        <member name="F:Recognos.Core.SimpleScheduler.taskToRun">
            <summary>
            Field holding the task to be executed at the scheduled time
            </summary>
        </member>
        <member name="F:Recognos.Core.SimpleScheduler.timeToRun">
            <summary>
            Time to run the task
            </summary>
        </member>
        <member name="F:Recognos.Core.SimpleScheduler.interval">
            <summary>
            Interval at witch to run the task
            </summary>
        </member>
        <member name="F:Recognos.Core.SimpleScheduler.disabled">
            <summary>
            Flag signaling if the scheduler is disabled
            </summary>
        </member>
        <member name="F:Recognos.Core.SimpleScheduler.timer">
            <summary>
            Time used to run the task
            </summary>
        </member>
        <member name="F:Recognos.Core.SimpleScheduler.disposed">
            <summary>
            Flag indicating whether the object has been disposed.
            </summary>
        </member>
        <member name="M:Recognos.Core.SimpleScheduler.#ctor(System.Action,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Recognos.Core.SimpleScheduler"/> class.
            </summary>
            <param name="task">The task to run.</param>
            <param name="timeToRun">The time to run.</param>
        </member>
        <member name="M:Recognos.Core.SimpleScheduler.#ctor(System.Action,System.String,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:Recognos.Core.SimpleScheduler"/> class.
            </summary>
            <param name="task">The task to run.</param>
            <param name="timeToRunTask">The time to run task.</param>
            <param name="interval">The interval.</param>
        </member>
        <member name="M:Recognos.Core.SimpleScheduler.Start">
            <summary>
            Starts the scheduler.
            </summary>
        </member>
        <member name="M:Recognos.Core.SimpleScheduler.Stop">
            <summary>
            Stops the scheduler.
            </summary>
        </member>
        <member name="M:Recognos.Core.SimpleScheduler.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Recognos.Core.SimpleScheduler.RunTask">
            <summary>
            Runs the scheduled task.
            </summary>
        </member>
        <member name="P:Recognos.Core.SimpleScheduler.IsRunning">
            <summary>
            Gets a value indicating whether this instance is running.
            </summary>
            <value>
            <c>true</c> if this instance is running; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Recognos.Core.Modeling.DefaultGuidGenerator">
            <summary>
            Implementation for a default guid generator. 
            </summary>
        </member>
        <member name="M:Recognos.Core.Modeling.DefaultGuidGenerator.GenerateId">
            <summary>
            Generates the id.
            </summary>
            <returns>The new id.</returns>
        </member>
        <member name="T:Recognos.Core.Collections.DataPageCollection`1">
            <summary>
            implementation for a page of data from a paged collection
            </summary>
            <typeparam name="T">Type of the data in the collection</typeparam>
        </member>
        <member name="T:Recognos.Core.Collections.IDataPageCollection`1">
            <summary>
            A page of data from a collection
            </summary>
            <typeparam name="T">type of the object stored in the collection</typeparam>
        </member>
        <member name="P:Recognos.Core.Collections.IDataPageCollection`1.Pagination">
            <summary>
            Gets the pagination object for witch this page has been generated
            </summary>
        </member>
        <member name="F:Recognos.Core.Collections.DataPageCollection`1.data">
            <summary>
            Storage for the data
            </summary>
        </member>
        <member name="M:Recognos.Core.Collections.DataPageCollection`1.#ctor">
            <summary>
            Initializes a new instance of the DataPageCollection class
            </summary>
        </member>
        <member name="M:Recognos.Core.Collections.DataPageCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0},Recognos.Core.Collections.IPagination)">
            <summary>
            Initializes a new instance of the DataPageCollection class
            </summary>
            <param name="data">data of the page</param>
            <param name="pagination">pagination object for this page</param>
        </member>
        <member name="M:Recognos.Core.Collections.DataPageCollection`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Recognos.Core.Collections.DataPageCollection`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:Recognos.Core.Collections.DataPageCollection`1.Pagination">
            <summary>
            Gets or sets the pagination object for this page
            </summary>
        </member>
        <member name="T:Recognos.Core.Format">
            <summary>
            Helper class to format strings with InvariantCulture
            </summary>
        </member>
        <member name="M:Recognos.Core.Format.Invariant(System.String,System.Object[])">
            <summary>
            Format a string with invariant culture.
            </summary>
            <param name="format">The format of the string.</param>
            <param name="args">The args to format with.</param>
            <returns>The formated string.</returns>
        </member>
        <member name="T:Recognos.Core.Caching.IDataContext">
            <summary>
            A queryable data context
            </summary>
        </member>
        <member name="M:Recognos.Core.Caching.IDataContext.Query``1">
            <summary>
            Returns a queryable collection of objects
            </summary>
            <typeparam name="T">Type of the queried objects</typeparam>
            <returns>A queryable collection of objects</returns>
        </member>
        <member name="M:Recognos.Core.Caching.IDataContext.Register``1(``0)">
            <summary>
            Add an object to the data context
            </summary>
            <typeparam name="T">Type of the object</typeparam>
            <param name="objectToInsert">The object to insert in the data context</param>
        </member>
        <member name="M:Recognos.Core.Caching.IDataContext.Register``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Add a collection of objects to the data context
            </summary>
            <typeparam name="T">Type of the objects</typeparam>
            <param name="collection">The collection of objects</param>
        </member>
        <member name="M:Recognos.Core.Caching.IDataContext.Delete``1(``0)">
            <summary>
            Delete an object form the data context
            </summary>
            <typeparam name="T">Type of object to delete</typeparam>
            <param name="objectToDelete">The object to delete</param>
        </member>
        <member name="M:Recognos.Core.Caching.IDataContext.Delete``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Delete a collection of objects form the data context
            </summary>
            <typeparam name="T">Type of object to delete</typeparam>
            <param name="collection">The collection of objects</param>
        </member>
        <member name="M:Recognos.Core.Caching.IDataContext.SubmitChanges">
            <summary>
            Commit the changes to the persistant storage
            </summary>
        </member>
        <member name="T:Recognos.Core.Collections.PageRetriever`2">
            <summary>
            Delegate used for retrieving a page from the collection
            euivalent of <![CDATA[ Func<TFilters,IDataPageCollection<T>> ]]> 
            </summary>
            <param name="filters">Filters to use for regriveing the page </param>
            <typeparam name="T">Type of the data in the page</typeparam>
            <typeparam name="TFilters">Type of the filter object</typeparam>
            <returns>A page of data</returns>
        </member>
        <member name="T:Recognos.Core.Collections.PagedDataNavigator`2">
            <summary>
            Implementation for a paged data navigator
            </summary>
            <typeparam name="T">Data type of the elements in the collection</typeparam>
            <typeparam name="TFilters">implementation for the filter class</typeparam>
        </member>
        <member name="T:Recognos.Core.Collections.IPagedDataNavigator`1">
            <summary>
            Navigator used for moving on a paged collection
            can move item by item and page by page
            </summary>
            <typeparam name="T">Type of data</typeparam>
        </member>
        <member name="M:Recognos.Core.Collections.IPagedDataNavigator`1.GetPage(System.Int32)">
            <summary>
            Get the page with the specified index
            </summary>
            <param name="index">Index of the requested page</param>
            <returns>The page with the specified index</returns>
        </member>
        <member name="M:Recognos.Core.Collections.IPagedDataNavigator`1.MoveToPage(System.Int32)">
            <summary>
            Move the specified page
            </summary>
            <param name="index">Index of the page to move to</param>
            <returns>True if the navigator is moved to the specified page, false if page does not exist</returns>       
        </member>
        <member name="M:Recognos.Core.Collections.IPagedDataNavigator`1.MoveToNextPage">
            <summary>
            Move the navigator to the next page
            </summary>
            <returns>True if the navigator is moved to the next page, false if there is no next page</returns>       
        </member>
        <member name="M:Recognos.Core.Collections.IPagedDataNavigator`1.MoveToPreviousPage">
            <summary>
            Move the navigator to the previous page
            </summary>
            <returns>True if the navigator is moved to the previous page, false if there is no previous page</returns>       
        </member>
        <member name="M:Recognos.Core.Collections.IPagedDataNavigator`1.MoveToNextItem">
            <summary>
            Makes the next item the current item
            </summary>
            <returns>True if the navigator is moved to the next item, false if there is no next item</returns>       
        </member>
        <member name="M:Recognos.Core.Collections.IPagedDataNavigator`1.MoveToPreviousItem">
            <summary>
            Makes the previous item the current item
            </summary>
            <returns>True if the navigator is moved to the previous item, false if there is no previous item</returns>       
        </member>
        <member name="P:Recognos.Core.Collections.IPagedDataNavigator`1.CurrentItem">
            <summary>
            Gets the current item in the collection
            </summary>
        </member>
        <member name="P:Recognos.Core.Collections.IPagedDataNavigator`1.PreviousItem">
            <summary>
            Gets the previous item in the collection ( might be on previous page )
            </summary>
        </member>
        <member name="P:Recognos.Core.Collections.IPagedDataNavigator`1.NextItem">
            <summary>
            Gets the next item in the collection ( might be on next page )
            </summary>
        </member>
        <member name="P:Recognos.Core.Collections.IPagedDataNavigator`1.CurrentPageIndex">
            <summary>
            Gets the index of the current page 
            </summary>
        </member>
        <member name="P:Recognos.Core.Collections.IPagedDataNavigator`1.NextPageIndex">
            <summary>
            Gets the index of the next page ( -1 if no next page )
            </summary>
        </member>
        <member name="P:Recognos.Core.Collections.IPagedDataNavigator`1.PreviousPageIndex">
            <summary>
            Gets the index of the previous page ( -1 if no previous page )
            </summary>
        </member>
        <member name="P:Recognos.Core.Collections.IPagedDataNavigator`1.LastPageIndex">
            <summary>
            Gets the index of the last page 
            </summary>
        </member>
        <member name="P:Recognos.Core.Collections.IPagedDataNavigator`1.Pagination">
            <summary>
            Gets the IPagination object used for the current page
            </summary>
        </member>
        <member name="P:Recognos.Core.Collections.IPagedDataNavigator`1.CurrentPage">
            <summary>
            Gets the current page or null if no current page
            </summary>
        </member>
        <member name="P:Recognos.Core.Collections.IPagedDataNavigator`1.NextPage">
            <summary>
            Gets the  next page or null if no next page
            </summary>
        </member>
        <member name="P:Recognos.Core.Collections.IPagedDataNavigator`1.PreviousPage">
            <summary>
            Gets the  previous page or null if no previous page
            </summary>
        </member>
        <member name="F:Recognos.Core.Collections.PagedDataNavigator`2.currentItemIndex">
            <summary>
            field for the current item index
            </summary>
        </member>
        <member name="F:Recognos.Core.Collections.PagedDataNavigator`2.currentItem">
            <summary>
            field for the current item
            </summary>
        </member>
        <member name="F:Recognos.Core.Collections.PagedDataNavigator`2.currentItemUpdated">
            <summary>
            field for storing a flag indicating wether the current item has been updated
            </summary>
        </member>
        <member name="F:Recognos.Core.Collections.PagedDataNavigator`2.pageRetriever">
            <summary>
            Delegate used to retrive the page data
            </summary>
        </member>
        <member name="F:Recognos.Core.Collections.PagedDataNavigator`2.currentFilters">
            <summary>
            Current fileters collection
            </summary>
        </member>
        <member name="M:Recognos.Core.Collections.PagedDataNavigator`2.#ctor(Recognos.Core.Collections.PageRetriever{`0,`1})">
            <summary>
            Initializes a new instance of the PagedDataNavigator class
            </summary>
            <param name="pageRetriever">function to retrive a page of data based on a filter object</param>
        </member>
        <member name="M:Recognos.Core.Collections.PagedDataNavigator`2.#ctor(`0,Recognos.Core.Collections.PageRetriever{`0,`1},`1)">
            <summary>
            Initializes a new instance of the PagedDataNavigator class
            </summary>
            <param name="currentItem">currently selected item in the collection</param>
            <param name="pageRetriever">function to retrive a page of data based on a filter object</param>
            <param name="currentFilters">filters used to get the current page</param>
        </member>
        <member name="M:Recognos.Core.Collections.PagedDataNavigator`2.GetPage(System.Int32)">
            <summary>
            gets the page with the specified index
            </summary>
            <param name="index">index of the page to retrive</param>
            <returns>the page with the specified index</returns>
        </member>
        <member name="M:Recognos.Core.Collections.PagedDataNavigator`2.MoveToPage(System.Int32)">
            <summary>
            move the specified page
            </summary>
            <param name="index">Index of the page to move to</param>
            <returns>true if the nvaigator is moved to the specified page, false if page does not exist</returns>
        </member>
        <member name="M:Recognos.Core.Collections.PagedDataNavigator`2.MoveToNextPage">
            <summary>
            move the navigator to the next page
            </summary>
            <returns>true if the nvaigator is moved to the next page, false if there is no next page</returns>       
        </member>
        <member name="M:Recognos.Core.Collections.PagedDataNavigator`2.MoveToPreviousPage">
            <summary>
            move the navigator to the previous page
            </summary>
            <returns>true if the nvaigator is moved to the previous page, false if there is no previous page</returns>       
        </member>
        <member name="M:Recognos.Core.Collections.PagedDataNavigator`2.MoveToNextItem">
            <summary>
            makes the next item the current item
            </summary>
            <returns>true if the nvaigator is moved to the next item, false if there is no next item</returns>       
        </member>
        <member name="M:Recognos.Core.Collections.PagedDataNavigator`2.MoveToPreviousItem">
            <summary>
            makes the previous item the current item
            </summary>
            <returns>true if the nvaigator is moved to the previous item, false if there is no previous item</returns>       
        </member>
        <member name="M:Recognos.Core.Collections.PagedDataNavigator`2.PrepareUpdateCurrentItemIndex(`0)">
            <summary>
            Prepare the Update of the the current item index
            </summary>
            <param name="currentItem">The current item</param>
        </member>
        <member name="M:Recognos.Core.Collections.PagedDataNavigator`2.UpdateCurrentItemIndex">
            <summary>
            Update the current item and hte index of the current item
            </summary>
        </member>
        <member name="P:Recognos.Core.Collections.PagedDataNavigator`2.CurrentPage">
            <summary>
            Gets the current page or null if no current page
            </summary>
        </member>
        <member name="P:Recognos.Core.Collections.PagedDataNavigator`2.CurrentPageIndex">
            <summary>
            Gets the index of the current page 
            </summary>
        </member>
        <member name="P:Recognos.Core.Collections.PagedDataNavigator`2.Pagination">
            <summary>
            Gets the current pagination object
            </summary>
        </member>
        <member name="P:Recognos.Core.Collections.PagedDataNavigator`2.NextPageIndex">
            <summary>
            Gets the index of the next page or -1 if no next page
            </summary>
        </member>
        <member name="P:Recognos.Core.Collections.PagedDataNavigator`2.PreviousPageIndex">
            <summary>
            Gets the index of the previous page or -1 if no previous page
            </summary>
        </member>
        <member name="P:Recognos.Core.Collections.PagedDataNavigator`2.LastPageIndex">
            <summary>
            Gets the index of the last page
            </summary>
        </member>
        <member name="P:Recognos.Core.Collections.PagedDataNavigator`2.NextPage">
            <summary>
            Gets the next page or null if no next page
            </summary>
        </member>
        <member name="P:Recognos.Core.Collections.PagedDataNavigator`2.PreviousPage">
            <summary>
            Gets the next page or null if no previous page
            </summary>
        </member>
        <member name="P:Recognos.Core.Collections.PagedDataNavigator`2.CurrentItem">
            <summary>
            Gets the current item in the collection
            </summary>
        </member>
        <member name="P:Recognos.Core.Collections.PagedDataNavigator`2.PreviousItem">
            <summary>
            Gets the previous item in the collection ( relative to the current item )
            </summary>
        </member>
        <member name="P:Recognos.Core.Collections.PagedDataNavigator`2.NextItem">
            <summary>
            Gets the next item in the collection ( relative to the current item )
            </summary>
        </member>
        <member name="P:Recognos.Core.Collections.PagedDataNavigator`2.CurrentItemIndex">
            <summary>
            Gets or sets the index of the current item.
            </summary>
            <value>The index of the current item.</value>
        </member>
        <member name="T:Recognos.Core.Collections.DataFilters">
            <summary>
            base class for expression filters on a collection of data.
            Provides Pagination.
            Inherit from this class and add required members for filtering
            </summary>
        </member>
        <member name="M:Recognos.Core.Collections.DataFilters.#ctor">
            <summary>
            Initializes a new instance of the DataFilters class
            </summary>
        </member>
        <member name="M:Recognos.Core.Collections.DataFilters.#ctor(Recognos.Core.Collections.IPagination)">
            <summary>
            Initializes a new instance of the DataFilters class
            </summary>
            <param name="pagination">IPagination object</param>
        </member>
        <member name="M:Recognos.Core.Collections.DataFilters.Clone">
            <summary>
            Clone the current filters
            </summary>
            <returns>new filters object with the same values</returns>
        </member>
        <member name="P:Recognos.Core.Collections.DataFilters.Pagination">
            <summary>
            Gets or sets the current pagination object
            </summary>
        </member>
        <member name="T:Recognos.Core.UUCodecs">
            <summary>
            Utility class to UUEncode and UUDecode
            </summary>
            <remarks>
            This class has been taken from
            http://geekswithblogs.net/kobush/articles/63486.aspx
            </remarks>
        </member>
        <member name="F:Recognos.Core.UUCodecs.UUEncMap">
            <summary>
            byte mapping used for encoding
            </summary>
        </member>
        <member name="F:Recognos.Core.UUCodecs.UUDecMap">
            <summary>
            byte mapping used for decoding
            </summary>
        </member>
        <member name="M:Recognos.Core.UUCodecs.UUDecode(System.IO.Stream,System.IO.Stream)">
            <summary>
            UUDecode a stream
            </summary>
            <param name="input">The input.</param>
            <param name="output">The output.</param>
        </member>
        <member name="M:Recognos.Core.UUCodecs.UUEncode(System.IO.Stream,System.IO.Stream)">
            <summary>
            UUencode a stream.
            </summary>
            <param name="input">The input.</param>
            <param name="output">The output.</param>
        </member>
        <member name="T:Recognos.Core.Threading.WriteLock">
            <summary>
            Implementation for a Write Lock based on ReaderWriterLockSlim
            </summary>
        </member>
        <member name="M:Recognos.Core.Threading.WriteLock.#ctor(System.Threading.ReaderWriterLockSlim)">
            <summary>
            Initializes a new instance of the <see cref="T:Recognos.Core.Threading.WriteLock"/> class.
            </summary>
            <param name="locks">The locks.</param>
        </member>
        <member name="M:Recognos.Core.Threading.WriteLock.DoDispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Recognos.Core.Context.ThreadStaticContext`1">
            <summary>
            Implementation of a thread static context.
            </summary>
            <typeparam name="T">Type of the elements to store in the context.</typeparam>
        </member>
        <member name="F:Recognos.Core.Context.ThreadStaticContext`1.instance">
            <summary>
            Field to store the thread static instance.
            </summary>
        </member>
        <member name="F:Recognos.Core.Context.ThreadStaticContext`1.instanceCreator">
            <summary>
            Functor to create the static instance.
            </summary>
        </member>
        <member name="M:Recognos.Core.Context.ThreadStaticContext`1.#ctor(System.Func{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Recognos.Core.Context.ThreadStaticContext`1"/> class.
            </summary>
            <param name="instanceCreator">The instance creator.</param>
        </member>
        <member name="M:Recognos.Core.Context.ThreadStaticContext`1.ResetCurrent">
            <summary>
            Resets the current value in the context to a new value.
            Can be used to reinitialize the current context.
            </summary>
        </member>
        <member name="P:Recognos.Core.Context.ThreadStaticContext`1.Current">
            <summary>
            Gets the current value in the context.
            </summary>
            <value>The current value in the context.</value>
        </member>
        <member name="T:Recognos.Core.Collections.Pair`2">
            <summary>
            A pair of two types
            </summary>
            <typeparam name="TFirst">Type of the first element</typeparam>
            <typeparam name="TSecond">Type of the second element</typeparam>
        </member>
        <member name="M:Recognos.Core.Collections.Pair`2.#ctor">
            <summary>
            Initializes a new instance of the Pair class
            </summary>
        </member>
        <member name="M:Recognos.Core.Collections.Pair`2.#ctor(`0,`1)">
            <summary>
            Initializes a new instance of the Pair class
            </summary>
            <param name="first">Value of the first element</param>
            <param name="second">Value of the second element</param>
        </member>
        <member name="M:Recognos.Core.Collections.Pair`2.GetAtomicValues">
            <summary>
            Gets the atomic values.
            </summary>
            <returns>The atomic values in this instance</returns>
        </member>
        <member name="P:Recognos.Core.Collections.Pair`2.First">
            <summary>
            Gets or sets the value first element
            </summary>
        </member>
        <member name="P:Recognos.Core.Collections.Pair`2.Second">
            <summary>
            Gets or sets the value second element
            </summary>
        </member>
        <member name="T:Recognos.Core.Caching.CachePriority">
            <summary>
            Priority of an item in the cache
            </summary>
        </member>
        <member name="F:Recognos.Core.Caching.CachePriority.Low">
            <summary>
            Item has a low priority
            </summary>
        </member>
        <member name="F:Recognos.Core.Caching.CachePriority.Normal">
            <summary>
            Item has a normal priority, the default
            </summary>
        </member>
        <member name="F:Recognos.Core.Caching.CachePriority.High">
            <summary>
            Item has a high priority
            </summary>
        </member>
        <member name="F:Recognos.Core.Caching.CachePriority.NotRemovable">
            <summary>
            Item is only removed from cache by time expiring or dependency
            </summary>
        </member>
        <member name="T:Recognos.Core.SaltedHash">
            <summary>
            Implementation for hashing a salted password and verifying the hash.
            </summary>
        </member>
        <member name="F:Recognos.Core.SaltedHash.hashAlgorithm">
            <summary>
            The hash algorithm implementation to use.
            </summary>
        </member>
        <member name="F:Recognos.Core.SaltedHash.saltLength">
            <summary>
            Length of the salt.
            </summary>
        </member>
        <member name="M:Recognos.Core.SaltedHash.#ctor(System.Security.Cryptography.HashAlgorithm,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Recognos.Core.SaltedHash"/> class.
            </summary>
            <param name="hashAlgorithm">A <see cref="T:System.Security.Cryptography.HashAlgorithm"/> HashAlgorihm which is derived from HashAlgorithm. C# provides
            the following classes: SHA1Managed,SHA256Managed, SHA384Managed, SHA512Managed and MD5CryptoServiceProvider</param>
            <param name="saltLength">Length of the salt.</param>
        </member>
        <member name="M:Recognos.Core.SaltedHash.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Recognos.Core.SaltedHash"/> class.
            </summary>
            <remarks>
            Default constructor which initializes the SaltedHash with the SHA256Managed algorithm
            and a Salt of 4 bytes ( or 4*8 = 32 bits)
            </remarks>
        </member>
        <member name="M:Recognos.Core.SaltedHash.GenerateHash(System.String)">
            <summary>
            Generates the hash.
            </summary>
            <param name="password">The password.</param>
            <returns>The hash.s</returns>
        </member>
        <member name="M:Recognos.Core.SaltedHash.VerifyHash(System.String,System.String)">
            <summary>
            Verifies the hash.
            </summary>
            <param name="password">The password.</param>
            <param name="hash">The hash.</param>
            <returns>True if the hash matches the hashed password.</returns>
        </member>
        <member name="M:Recognos.Core.SaltedHash.ComputeHash(System.Byte[],System.Byte[])">
            <summary>
            The actual hash calculation is shared by both GetHashAndSalt and the VerifyHash functions
            </summary>
            <param name="password">A byte array of the Data to Hash</param>
            <param name="salt">A byte array of the Salt to add to the Hash</param>
            <returns>A byte array with the calculated hash</returns>
        </member>
        <member name="M:Recognos.Core.SaltedHash.GenerateSalt">
            <summary>
            Generates the salt.
            </summary>
            <returns>Byte array containing the salt.</returns>
        </member>
        <member name="T:Recognos.Core.Context.StaticContext`1">
            <summary>
            Implementation of a static context.
            </summary>
            <typeparam name="T">Type of the object to store in the static context.</typeparam>
        </member>
        <member name="F:Recognos.Core.Context.StaticContext`1.padlock">
            <summary>
            Object used to ensure thread safe get.
            </summary>
        </member>
        <member name="F:Recognos.Core.Context.StaticContext`1.instance">
            <summary>
            Field to store the static instance.
            </summary>
        </member>
        <member name="F:Recognos.Core.Context.StaticContext`1.instanceCreator">
            <summary>
            Functor to create the static instance.
            </summary>
        </member>
        <member name="M:Recognos.Core.Context.StaticContext`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Recognos.Core.Context.StaticContext`1"/> class.
            </summary>
            <param name="instance">The instance.</param>
        </member>
        <member name="M:Recognos.Core.Context.StaticContext`1.#ctor(System.Func{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Recognos.Core.Context.StaticContext`1"/> class.
            </summary>
            <param name="instanceCreator">The instance creator.</param>
        </member>
        <member name="M:Recognos.Core.Context.StaticContext`1.ResetCurrent">
            <summary>
            Resets the current value in the context to a new value.
            Can be used to reinitialize the current context.
            </summary>
        </member>
        <member name="P:Recognos.Core.Context.StaticContext`1.Current">
            <summary>
            Gets the current value in the context.
            </summary>
            <value>The current value in the context.</value>
        </member>
        <member name="T:Recognos.Core.Context.BaseKeyContextualStorage`1">
            <summary>
            Base class for storages backed by a key,value store.
            </summary>
            <typeparam name="T">Type to store.</typeparam>
        </member>
        <member name="F:Recognos.Core.Context.BaseKeyContextualStorage`1.Key">
            <summary>
            Key used for storing the type in the context.
            </summary>
        </member>
        <member name="F:Recognos.Core.Context.BaseKeyContextualStorage`1.padlock">
            <summary>
            Guard for thread safety.
            </summary>
        </member>
        <member name="F:Recognos.Core.Context.BaseKeyContextualStorage`1.instanceCreator">
            <summary>
            Functor to create the static instance.
            </summary>
        </member>
        <member name="M:Recognos.Core.Context.BaseKeyContextualStorage`1.#ctor(System.Func{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Recognos.Core.Context.BaseKeyContextualStorage`1"/> class.
            </summary>
            <param name="instanceCreator">The instance creator.</param>
        </member>
        <member name="M:Recognos.Core.Context.BaseKeyContextualStorage`1.ResetCurrent">
            <summary>
            Resets the current value in the context to a new value.
            Can be used to reinitialize the current context.
            </summary>
        </member>
        <member name="M:Recognos.Core.Context.BaseKeyContextualStorage`1.GetInstance(System.String)">
            <summary>
            Gets the instance.
            </summary>
            <param name="key">The key of the type.</param>
            <returns>The instance.</returns>
        </member>
        <member name="M:Recognos.Core.Context.BaseKeyContextualStorage`1.SetInstance(System.String,`0)">
            <summary>
            Sets the instance.
            </summary>
            <param name="key">The key of the type.</param>
            <param name="data">The instance.</param>
        </member>
        <member name="P:Recognos.Core.Context.BaseKeyContextualStorage`1.Current">
            <summary>
            Gets the current value in the context.
            </summary>
            <value>The current value in the context.</value>
        </member>
    </members>
</doc>
